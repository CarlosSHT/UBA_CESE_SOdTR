
PO3_freertos_book_Example3_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d2c  08005d2c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          0000455c  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004608  20004608  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bae  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  00039c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  0003e708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000445f  00000000  00000000  0003fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e81  00000000  00000000  00043faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebcc5  00000000  00000000  0005be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147af5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060ac  00000000  00000000  00147b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005b20 	.word	0x08005b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08005b20 	.word	0x08005b20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b092      	sub	sp, #72	; 0x48
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const char *pcTextForMain = "PO3_freertos_book_Example3_6 is running: PO (3 de 6)\r\n\n";
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <main+0x9c>)
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fd6f 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f859 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f967 	bl	8000888 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ba:	f000 f8bf 	bl	800073c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005be:	f000 f90b 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c2:	f000 f933 	bl	800082c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80005c8:	f000 fc32 	bl	8000e30 <vPrintString>

#if( TASKS_SCOPE == TASKS_OUTSIDE_MAIN)
	  /* Create the thread(s) */
	  /* definition and creation of Task1 */
	  ptr = &LDX_Config[0];
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <main+0xa0>)
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
	  osThreadDef(Task1, vTaskFunction, osPriorityNormal, 0, 128);
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <main+0xa4>)
 80005d2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	682b      	ldr	r3, [r5, #0]
 80005de:	6023      	str	r3, [r4, #0]
	  Task1Handle = osThreadCreate(osThread(Task1), (void*) ptr);
 80005e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fb25 	bl	8003c36 <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <main+0xa8>)
 80005f0:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Task2 */
	  ptr = &LDX_Config[1];
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <main+0xac>)
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
	  osThreadDef(Task2, vTaskFunction, osPriorityNormal, 0, 128);
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <main+0xb0>)
 80005f8:	f107 0418 	add.w	r4, r7, #24
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	6023      	str	r3, [r4, #0]
	  Task2Handle = osThreadCreate(osThread(Task2), (void*) ptr);
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fb12 	bl	8003c36 <osThreadCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <main+0xb4>)
 8000616:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Task3 */
	  ptr = &LDX_Config[2];
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0xb8>)
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
	  osThreadDef(Task3, vTaskFunction, osPriorityNormal, 0, 128);
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <main+0xbc>)
 800061e:	1d3c      	adds	r4, r7, #4
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	682b      	ldr	r3, [r5, #0]
 8000628:	6023      	str	r3, [r4, #0]
	  Task3Handle = osThreadCreate(osThread(Task3), (void*) ptr);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fb01 	bl	8003c36 <osThreadCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <main+0xc0>)
 8000638:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
#endif
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063a:	f003 fae5 	bl	8003c08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x9a>
 8000640:	08005b50 	.word	0x08005b50
 8000644:	20000018 	.word	0x20000018
 8000648:	08005b88 	.word	0x08005b88
 800064c:	20000840 	.word	0x20000840
 8000650:	20000024 	.word	0x20000024
 8000654:	08005b9c 	.word	0x08005b9c
 8000658:	20000844 	.word	0x20000844
 800065c:	20000030 	.word	0x20000030
 8000660:	08005bb0 	.word	0x08005bb0
 8000664:	20000848 	.word	0x20000848

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fd82 	bl	8005180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006dc:	23a8      	movs	r3, #168	; 0xa8
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fc25 	bl	8001f3c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 f986 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2105      	movs	r1, #5
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fe86 	bl	800242c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 f96f 	bl	8000a08 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ETH_Init+0x84>)
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MX_ETH_Init+0x88>)
 8000744:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ETH_Init+0x8c>)
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000754:	22e1      	movs	r2, #225	; 0xe1
 8000756:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ETH_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ETH_Init+0x84>)
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_ETH_Init+0x8c>)
 800076e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_ETH_Init+0x84>)
 8000772:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000776:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ETH_Init+0x84>)
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <MX_ETH_Init+0x90>)
 800077c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_ETH_Init+0x84>)
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_ETH_Init+0x94>)
 8000782:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_ETH_Init+0x84>)
 8000786:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800078a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_ETH_Init+0x84>)
 800078e:	f000 fdc7 	bl	8001320 <HAL_ETH_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f936 	bl	8000a08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800079c:	2238      	movs	r2, #56	; 0x38
 800079e:	2100      	movs	r1, #0
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_ETH_Init+0x98>)
 80007a2:	f004 fced 	bl	8005180 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_ETH_Init+0x98>)
 80007a8:	2221      	movs	r2, #33	; 0x21
 80007aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_ETH_Init+0x98>)
 80007ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_ETH_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000240 	.word	0x20000240
 80007c4:	40028000 	.word	0x40028000
 80007c8:	2000084c 	.word	0x2000084c
 80007cc:	200001a0 	.word	0x200001a0
 80007d0:	20000100 	.word	0x20000100
 80007d4:	200000c8 	.word	0x200000c8

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART3_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART3_UART_Init+0x4c>)
 8000810:	f002 fb0c 	bl	8002e2c <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8f5 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200002f0 	.word	0x200002f0
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2204      	movs	r2, #4
 800083c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2201      	movs	r2, #1
 8000854:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2201      	movs	r2, #1
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	f001 fa47 	bl	8001d02 <HAL_PCD_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f8c5 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000334 	.word	0x20000334

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a44      	ldr	r2, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a3d      	ldr	r2, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a36      	ldr	r2, [pc, #216]	; (80009d4 <MX_GPIO_Init+0x14c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <MX_GPIO_Init+0x14c>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	; 0x4081
 800094c:	4822      	ldr	r0, [pc, #136]	; (80009d8 <MX_GPIO_Init+0x150>)
 800094e:	f001 f9bf 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4821      	ldr	r0, [pc, #132]	; (80009dc <MX_GPIO_Init+0x154>)
 8000958:	f001 f9ba 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	; (80009e0 <MX_GPIO_Init+0x158>)
 8000974:	f000 ffe8 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	; 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x150>)
 8000992:	f000 ffd9 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0x154>)
 80009ae:	f000 ffcb 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0x154>)
 80009c6:	f000 ffbf 	bl	8001948 <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020800 	.word	0x40020800

080009e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f6:	f000 fb6d 	bl	80010d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40001400 	.word	0x40001400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_MspInit+0x54>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x54>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_MspInit+0x54>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_MspInit+0x54>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	210f      	movs	r1, #15
 8000a56:	f06f 0001 	mvn.w	r0, #1
 8000a5a:	f000 fc37 	bl	80012cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a55      	ldr	r2, [pc, #340]	; (8000be0 <HAL_ETH_MspInit+0x174>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 80a4 	bne.w	8000bd8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a52      	ldr	r2, [pc, #328]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a36      	ldr	r2, [pc, #216]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b54:	2332      	movs	r3, #50	; 0x32
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b64:	230b      	movs	r3, #11
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	; (8000be8 <HAL_ETH_MspInit+0x17c>)
 8000b70:	f000 feea 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b74:	2386      	movs	r3, #134	; 0x86
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <HAL_ETH_MspInit+0x180>)
 8000b90:	f000 feda 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <HAL_ETH_MspInit+0x184>)
 8000bb2:	f000 fec9 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc8:	230b      	movs	r3, #11
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f000 feb8 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40028000 	.word	0x40028000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12c      	bne.n	8000c74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c64:	2307      	movs	r3, #7
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c70:	f000 fe6a 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ca8:	d13f      	bne.n	8000d2a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4815      	ldr	r0, [pc, #84]	; (8000d38 <HAL_PCD_MspInit+0xb0>)
 8000ce4:	f000 fe30 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_PCD_MspInit+0xb0>)
 8000cfe:	f000 fe23 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_PCD_MspInit+0xac>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2037      	movs	r0, #55	; 0x37
 8000d52:	f000 fabb 	bl	80012cc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d56:	2037      	movs	r0, #55	; 0x37
 8000d58:	f000 fad4 	bl	8001304 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fd72 	bl	800286c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d88:	f001 fd48 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_InitTick+0xa8>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9b      	lsrs	r3, r3, #18
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_InitTick+0xac>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_InitTick+0xb0>)
 8000da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_InitTick+0xac>)
 8000da8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dac:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_InitTick+0xac>)
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_InitTick+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_InitTick+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_InitTick+0xac>)
 8000dc2:	f001 fd85 	bl	80028d0 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_InitTick+0xac>)
 8000dce:	f001 fdd9 	bl	8002984 <HAL_TIM_Base_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	20000854 	.word	0x20000854
 8000dec:	40001400 	.word	0x40001400

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM7_IRQHandler+0x10>)
 8000e22:	f001 fe1f 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000854 	.word	0x20000854

08000e30 <vPrintString>:
extern UART_HandleTypeDef huart3;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000e38:	f003 fe5c 	bl	8004af4 <vPortEnterCritical>
	{
		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), HAL_MAX_DELAY );
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff f9d7 	bl	80001f0 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <vPrintString+0x30>)
 8000e4e:	f002 f83a 	bl	8002ec6 <HAL_UART_Transmit>
	}
	taskEXIT_CRITICAL();
 8000e52:	f003 fe7f 	bl	8004b54 <vPortExitCritical>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200002f0 	.word	0x200002f0

08000e64 <vPrintTwoStrings>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b092      	sub	sp, #72	; 0x48
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	char buffer [50];

	vTaskSuspendAll();
 8000e6e:	f003 f9eb 	bl	8004248 <vTaskSuspendAll>
	{
		sprintf( buffer, "At time %lu : %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 8000e72:	f003 fa93 	bl	800439c <xTaskGetTickCount>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f107 000c 	add.w	r0, r7, #12
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	490b      	ldr	r1, [pc, #44]	; (8000eb0 <vPrintTwoStrings+0x4c>)
 8000e84:	f004 fa92 	bl	80053ac <siprintf>
		HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), HAL_MAX_DELAY );
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9af 	bl	80001f0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f107 010c 	add.w	r1, r7, #12
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <vPrintTwoStrings+0x50>)
 8000ea0:	f002 f811 	bl	8002ec6 <HAL_UART_Transmit>
	}
	xTaskResumeAll();
 8000ea4:	f003 f9de 	bl	8004264 <xTaskResumeAll>
}
 8000ea8:	bf00      	nop
 8000eaa:	3740      	adds	r7, #64	; 0x40
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08005be0 	.word	0x08005be0
 8000eb4:	200002f0 	.word	0x200002f0

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f004 f910 	bl	800510c <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20030000 	.word	0x20030000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	2000089c 	.word	0x2000089c
 8000f20:	20004608 	.word	0x20004608

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <vTaskFunction>:
// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task Function thread */
void vTaskFunction( void const * argument )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	LDX_Config_t * ptr = (LDX_Config_t *) argument;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	613b      	str	r3, [r7, #16]

	uint32_t xLastledTickCnt;
	xLastledTickCnt = osKernelSysTick();
 8000f54:	f002 fe5f 	bl	8003c16 <osKernelSysTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60bb      	str	r3, [r7, #8]
//	ptr->ledTickCnt = osKernelSysTick();

	uint32_t buttonTickCnt = osKernelSysTick();
 8000f5c:	f002 fe5b 	bl	8003c16 <osKernelSysTick>
 8000f60:	6178      	str	r0, [r7, #20]

	char *pcTaskName = ( char * ) pcTaskGetName( NULL );
 8000f62:	2000      	movs	r0, #0
 8000f64:	f003 fa3c 	bl	80043e0 <pcTaskGetName>
 8000f68:	60f8      	str	r0, [r7, #12]

	/* Print out the name of this task. */
	vPrintTwoStrings(pcTaskName, pcTextForTask_IsRunning );
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <vTaskFunction+0xdc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff77 	bl	8000e64 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Check HW Button State */
		if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET )
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	482b      	ldr	r0, [pc, #172]	; (8001028 <vTaskFunction+0xe0>)
 8000f7c:	f000 fe90 	bl	8001ca0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d121      	bne.n	8000fca <vTaskFunction+0x82>
		{
			/* Delay for a period using Tick Count */
			if( (osKernelSysTick() - buttonTickCnt) >= buttonTickCntMAX )
 8000f86:	f002 fe46 	bl	8003c16 <osKernelSysTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f94:	d319      	bcc.n	8000fca <vTaskFunction+0x82>
			{
        		/* Check, Update and Print Led Flag */
				if( ptr->ledFlag == NotBlinking )
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	79db      	ldrb	r3, [r3, #7]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d109      	bne.n	8000fb2 <vTaskFunction+0x6a>
				{
					ptr->ledFlag = Blinking;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	71da      	strb	r2, [r3, #7]
                	vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOn );
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <vTaskFunction+0xe4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff ff5a 	bl	8000e64 <vPrintTwoStrings>
 8000fb0:	e008      	b.n	8000fc4 <vTaskFunction+0x7c>
				}
				else
				{
					ptr->ledFlag = NotBlinking;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	71da      	strb	r2, [r3, #7]
                	vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOff );
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <vTaskFunction+0xe8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ff50 	bl	8000e64 <vPrintTwoStrings>
				}
				/* Update and Button Tick Counter */
        		buttonTickCnt = osKernelSysTick();
 8000fc4:	f002 fe27 	bl	8003c16 <osKernelSysTick>
 8000fc8:	6178      	str	r0, [r7, #20]
			}
		}

		/* Check Led Flag */
		if( ptr->ledFlag == Blinking )
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	79db      	ldrb	r3, [r3, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1d1      	bne.n	8000f76 <vTaskFunction+0x2e>
		{
//			/* Delay for a period using Tick Count. */
//			if( (osKernelSysTick() - ptr->ledTickCnt) >= ledTickCntMAX )
//			{
				/* Check, Update and Print Led State */
		    	if( ptr->ledState == GPIO_PIN_RESET)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	799b      	ldrb	r3, [r3, #6]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <vTaskFunction+0xa6>
		    	{
		    		ptr->ledState = GPIO_PIN_SET;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	719a      	strb	r2, [r3, #6]
                	vPrintTwoStrings(pcTaskName, pcTextForTask_LDXTOn );
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <vTaskFunction+0xec>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff ff3c 	bl	8000e64 <vPrintTwoStrings>
 8000fec:	e008      	b.n	8001000 <vTaskFunction+0xb8>
		    	}
		    	else
		    	{
		    		ptr->ledState = GPIO_PIN_RESET;
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	719a      	strb	r2, [r3, #6]
                	vPrintTwoStrings(pcTaskName, pcTextForTask_LDXTOff );
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <vTaskFunction+0xf0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ff32 	bl	8000e64 <vPrintTwoStrings>
		    	}
				/* Update HW Led State */
		    	HAL_GPIO_WritePin( ptr->LDX_GPIO_Port, ptr->LDX_Pin, ptr->ledState );
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	8899      	ldrh	r1, [r3, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	799b      	ldrb	r3, [r3, #6]
 800100c:	461a      	mov	r2, r3
 800100e:	f000 fe5f 	bl	8001cd0 <HAL_GPIO_WritePin>

//		    	/* Update and Led Tick Counter */
//		    	ptr->ledTickCnt = osKernelSysTick();
				osDelayUntil( &xLastledTickCnt, ledTickCntMAX );
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fe32 	bl	8003c84 <osDelayUntil>
		if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET )
 8001020:	e7a9      	b.n	8000f76 <vTaskFunction+0x2e>
 8001022:	bf00      	nop
 8001024:	20000004 	.word	0x20000004
 8001028:	40020800 	.word	0x40020800
 800102c:	20000010 	.word	0x20000010
 8001030:	20000014 	.word	0x20000014
 8001034:	20000008 	.word	0x20000008
 8001038:	2000000c 	.word	0x2000000c

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001042:	490e      	ldr	r1, [pc, #56]	; (800107c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001058:	4c0b      	ldr	r4, [pc, #44]	; (8001088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001066:	f7ff ff5d 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f004 f855 	bl	8005118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa99 	bl	80005a4 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001074:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001080:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 8001084:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001088:	20004608 	.word	0x20004608

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f8fc 	bl	80012b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f7ff fe3c 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fca6 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000040 	.word	0x20000040
 80010f8:	200008a0 	.word	0x200008a0

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200008a0 	.word	0x200008a0

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000040 	.word	0x20000040

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff4c 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012de:	f7ff ff61 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f7ff ffb1 	bl	8001250 <NVIC_EncodePriority>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff80 	bl	80011fc <__NVIC_SetPriority>
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff54 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06c      	b.n	800140c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2223      	movs	r2, #35	; 0x23
 8001340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fb91 	bl	8000a6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_ETH_Init+0xf4>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_ETH_Init+0xf4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_ETH_Init+0xf8>)
 800136c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001370:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4927      	ldr	r1, [pc, #156]	; (8001418 <HAL_ETH_Init+0xf8>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_ETH_Init+0xf8>)
 8001382:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800139a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff feae 	bl	80010fc <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a2:	e011      	b.n	80013c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a4:	f7ff feaa 	bl	80010fc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b2:	d909      	bls.n	80013c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	22e0      	movs	r2, #224	; 0xe0
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1e4      	bne.n	80013a4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f944 	bl	8001668 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f9eb 	bl	80017bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa41 	bl	800186e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f9a9 	bl	800174c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2210      	movs	r2, #16
 8001406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800

0800141c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <ETH_SetMACConfig+0x134>)
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <ETH_SetMACConfig+0x28>
 800143e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001442:	e000      	b.n	8001446 <ETH_SetMACConfig+0x2a>
 8001444:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7c5b      	ldrb	r3, [r3, #17]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <ETH_SetMACConfig+0x38>
 800144e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001452:	e000      	b.n	8001456 <ETH_SetMACConfig+0x3a>
 8001454:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001456:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800145c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7fdb      	ldrb	r3, [r3, #31]
 8001462:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001464:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800146a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	7f92      	ldrb	r2, [r2, #30]
 8001470:	2a00      	cmp	r2, #0
 8001472:	d102      	bne.n	800147a <ETH_SetMACConfig+0x5e>
 8001474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001478:	e000      	b.n	800147c <ETH_SetMACConfig+0x60>
 800147a:	2200      	movs	r2, #0
                        macconf->Speed |
 800147c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
 8001482:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001484:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800148a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f892 2020 	ldrb.w	r2, [r2, #32]
 800149a:	2a00      	cmp	r2, #0
 800149c:	d102      	bne.n	80014a4 <ETH_SetMACConfig+0x88>
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	e000      	b.n	80014a6 <ETH_SetMACConfig+0x8a>
 80014a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	7bdb      	ldrb	r3, [r3, #15]
 80014ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014be:	4313      	orrs	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff fe1c 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001502:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001508:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001510:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001518:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001520:	4313      	orrs	r3, r2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fdeb 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	ff20810f 	.word	0xff20810f

08001554 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <ETH_SetDMAConfig+0x110>)
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7b1b      	ldrb	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetDMAConfig+0x2c>
 800157a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800157e:	e000      	b.n	8001582 <ETH_SetDMAConfig+0x2e>
 8001580:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	7b5b      	ldrb	r3, [r3, #13]
 8001586:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001588:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	7f52      	ldrb	r2, [r2, #29]
 800158e:	2a00      	cmp	r2, #0
 8001590:	d102      	bne.n	8001598 <ETH_SetDMAConfig+0x44>
 8001592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001596:	e000      	b.n	800159a <ETH_SetDMAConfig+0x46>
 8001598:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800159a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	7b9b      	ldrb	r3, [r3, #14]
 80015a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7f1b      	ldrb	r3, [r3, #28]
 80015ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	7f9b      	ldrb	r3, [r3, #30]
 80015b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015c8:	4313      	orrs	r3, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fd92 	bl	8001114 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001608:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800160e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001614:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800161c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800161e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001626:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800162c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001636:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff fd63 	bl	8001114 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f8de3f23 	.word	0xf8de3f23

08001668 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0a6      	sub	sp, #152	; 0x98
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001670:	2301      	movs	r3, #1
 8001672:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016a4:	2300      	movs	r3, #0
 80016a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe9a 	bl	800141c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800171e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001722:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff08 	bl	8001554 <ETH_SetDMAConfig>
}
 8001744:	bf00      	nop
 8001746:	3798      	adds	r7, #152	; 0x98
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3305      	adds	r3, #5
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	3204      	adds	r2, #4
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <ETH_MACAddressConfig+0x68>)
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3303      	adds	r3, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	061a      	lsls	r2, r3, #24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3302      	adds	r3, #2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4313      	orrs	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <ETH_MACAddressConfig+0x6c>)
 800179e:	4413      	add	r3, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40028040 	.word	0x40028040
 80017b8:	40028044 	.word	0x40028044

080017bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e03e      	b.n	8001848 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68d9      	ldr	r1, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	3206      	adds	r2, #6
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d80c      	bhi.n	800182c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e004      	b.n	8001836 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9bd      	bls.n	80017ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	611a      	str	r2, [r3, #16]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e046      	b.n	800190a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80018c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	3212      	adds	r2, #18
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d80c      	bhi.n	80018fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	e004      	b.n	8001904 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d9b5      	bls.n	800187c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	60da      	str	r2, [r3, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e177      	b.n	8001c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8166 	bne.w	8001c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80c0 	beq.w	8001c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a61      	ldr	r2, [pc, #388]	; (8001c70 <HAL_GPIO_Init+0x328>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <HAL_GPIO_Init+0x32c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d037      	beq.n	8001b86 <HAL_GPIO_Init+0x23e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_GPIO_Init+0x23a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x236>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <HAL_GPIO_Init+0x338>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x232>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_GPIO_Init+0x33c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a53      	ldr	r2, [pc, #332]	; (8001c88 <HAL_GPIO_Init+0x340>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x22a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_GPIO_Init+0x344>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <HAL_GPIO_Init+0x348>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_GPIO_Init+0x34c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b5e:	2309      	movs	r3, #9
 8001b60:	e012      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b62:	230a      	movs	r3, #10
 8001b64:	e010      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b66:	2308      	movs	r3, #8
 8001b68:	e00e      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00c      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e00a      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b86:	2300      	movs	r3, #0
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x328>)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bca:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x354>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f67f ae84 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021800 	.word	0x40021800
 8001c90:	40021c00 	.word	0x40021c00
 8001c94:	40022000 	.word	0x40022000
 8001c98:	40022400 	.word	0x40022400
 8001c9c:	40013c00 	.word	0x40013c00

08001ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cec:	e003      	b.n	8001cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d04:	b08f      	sub	sp, #60	; 0x3c
 8001d06:	af0a      	add	r7, sp, #40	; 0x28
 8001d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e10f      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe ffaa 	bl	8000c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fc8d 	bl	8003672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	687e      	ldr	r6, [r7, #4]
 8001d60:	466d      	mov	r5, sp
 8001d62:	f106 0410 	add.w	r4, r6, #16
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d76:	1d33      	adds	r3, r6, #4
 8001d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f001 fc18 	bl	80035b0 <USB_CoreInit>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0d0      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fc7b 	bl	8003694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e04a      	b.n	8001e3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	333d      	adds	r3, #61	; 0x3d
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	333c      	adds	r3, #60	; 0x3c
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3344      	adds	r3, #68	; 0x44
 8001de0:	4602      	mov	r2, r0
 8001de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3340      	adds	r3, #64	; 0x40
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3348      	adds	r3, #72	; 0x48
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	334c      	adds	r3, #76	; 0x4c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3354      	adds	r3, #84	; 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3af      	bcc.n	8001da4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e044      	b.n	8001ed4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3b5      	bcc.n	8001e4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	687e      	ldr	r6, [r7, #4]
 8001ee6:	466d      	mov	r5, sp
 8001ee8:	f106 0410 	add.w	r4, r6, #16
 8001eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efc:	1d33      	adds	r3, r6, #4
 8001efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f00:	6838      	ldr	r0, [r7, #0]
 8001f02:	f001 fc13 	bl	800372c <USB_DevInit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00d      	b.n	8001f34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 fdde 	bl	8003aee <USB_DevDisconnect>

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e267      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d075      	beq.n	8002046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d00c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d112      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05b      	beq.n	8002044 <HAL_RCC_OscConfig+0x108>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e242      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x74>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6f      	ldr	r2, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fd4:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a68      	ldr	r2, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f882 	bl	80010fc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f87e 	bl	80010fc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e207      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xc0>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f86e 	bl	80010fc <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f86a 	bl	80010fc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1f3      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0xe8>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002052:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_RCC_OscConfig+0x240>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1c7      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4937      	ldr	r1, [pc, #220]	; (800217c <HAL_RCC_OscConfig+0x240>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x244>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff f823 	bl	80010fc <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff f81f 	bl	80010fc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1a8      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4925      	ldr	r1, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x240>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x244>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f802 	bl	80010fc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7fe fffe 	bl	80010fc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e187      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d036      	beq.n	8002194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_RCC_OscConfig+0x248>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe ffe2 	bl	80010fc <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe ffde 	bl	80010fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e167      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x240>)
 8002150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x200>
 800215a:	e01b      	b.n	8002194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x248>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe ffcb 	bl	80010fc <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	e00e      	b.n	8002188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216a:	f7fe ffc7 	bl	80010fc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d907      	bls.n	8002188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e150      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800218a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ea      	bne.n	800216a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8097 	beq.w	80022d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a7c      	ldr	r2, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b77      	ldr	r3, [pc, #476]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a73      	ldr	r2, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe ff87 	bl	80010fc <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe ff83 	bl	80010fc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e10c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x474>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x2ea>
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	e01c      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x30c>
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002248:	4b58      	ldr	r3, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
 8002254:	4b55      	ldr	r3, [pc, #340]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe ff48 	bl	80010fc <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe ff44 	bl	80010fc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0cb      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe ff32 	bl	80010fc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe ff2e 	bl	80010fc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0b5      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ee      	bne.n	800229c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a1 	beq.w	800241c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d05c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d141      	bne.n	8002372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff02 	bl	80010fc <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fefe 	bl	80010fc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e087      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	491b      	ldr	r1, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fed7 	bl	80010fc <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fed3 	bl	80010fc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e05c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x416>
 8002370:	e054      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fec0 	bl	80010fc <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe febc 	bl	80010fc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e045      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_OscConfig+0x470>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
 800239e:	e03d      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e038      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4ec>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d11a      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cc      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d90c      	bls.n	8002468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d044      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d119      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e067      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fdee 	bl	80010fc <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fdea 	bl	80010fc <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d20c      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fbb2 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08005c78 	.word	0x08005c78
 80025f0:	20000000 	.word	0x20000000
 80025f4:	2000003c 	.word	0x2000003c

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fdca 	bl	80002a0 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd70 	bl	80002a0 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08005c88 	.word	0x08005c88

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08005c88 	.word	0x08005c88

0800286c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	220f      	movs	r2, #15
 800287a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_RCC_GetClockConfig+0x60>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e041      	b.n	8002966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f839 	bl	800296e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 f9d8 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e04e      	b.n	8002a3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_TIM_Base_Start_IT+0xc4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d022      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d01d      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_TIM_Base_Start_IT+0xc8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <HAL_TIM_Base_Start_IT+0xcc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_TIM_Base_Start_IT+0xd0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_TIM_Base_Start_IT+0xd4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_TIM_Base_Start_IT+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d010      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40001800 	.word	0x40001800

08002a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8ee 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8e0 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8f1 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0204 	mvn.w	r2, #4
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8c4 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8b6 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8c7 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0208 	mvn.w	r2, #8
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f89a 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f88c 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f89d 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2208      	movs	r2, #8
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f870 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f862 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f873 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0201 	mvn.w	r2, #1
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fefe 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f902 	bl	8002e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f838 	bl	8002cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8cc 	bl	8002e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d00f      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2f      	ldr	r2, [pc, #188]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d027      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d023      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d017      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00f      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <TIM_Base_SetConfig+0x134>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <TIM_Base_SetConfig+0x138>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <TIM_Base_SetConfig+0x13c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800
 8002df8:	40001800 	.word	0x40001800
 8002dfc:	40001c00 	.word	0x40001c00
 8002e00:	40002000 	.word	0x40002000

08002e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e03f      	b.n	8002ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fed0 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f929 	bl	80030c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b08a      	sub	sp, #40	; 0x28
 8002eca:	af02      	add	r7, sp, #8
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d17c      	bne.n	8002fe0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_UART_Transmit+0x2c>
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e075      	b.n	8002fe2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Transmit+0x3e>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e06e      	b.n	8002fe2 <HAL_UART_Transmit+0x11c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2221      	movs	r2, #33	; 0x21
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f1a:	f7fe f8ef 	bl	80010fc <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d108      	bne.n	8002f48 <HAL_UART_Transmit+0x82>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e003      	b.n	8002f50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f58:	e02a      	b.n	8002fb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f840 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e036      	b.n	8002fe2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e007      	b.n	8002fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1cf      	bne.n	8002f5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f810 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e006      	b.n	8002fe2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b090      	sub	sp, #64	; 0x40
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffa:	e050      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d04c      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
 800300a:	f7fe f877 	bl	80010fc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	429a      	cmp	r2, r3
 8003018:	d241      	bcs.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303a:	637a      	str	r2, [r7, #52]	; 0x34
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800306e:	623a      	str	r2, [r7, #32]
 8003070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	69f9      	ldr	r1, [r7, #28]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	61bb      	str	r3, [r7, #24]
   return(result);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e00f      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d09f      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3740      	adds	r7, #64	; 0x40
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b0c0      	sub	sp, #256	; 0x100
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	ea40 0301 	orr.w	r3, r0, r1
 80030f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	431a      	orrs	r2, r3
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003120:	f021 010c 	bic.w	r1, r1, #12
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	6999      	ldr	r1, [r3, #24]
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	ea40 0301 	orr.w	r3, r0, r1
 800314e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b8f      	ldr	r3, [pc, #572]	; (8003394 <UART_SetConfig+0x2cc>)
 8003158:	429a      	cmp	r2, r3
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0xa0>
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <UART_SetConfig+0x2d0>)
 8003164:	429a      	cmp	r2, r3
 8003166:	d104      	bne.n	8003172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff fb6c 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 800316c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003170:	e003      	b.n	800317a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003172:	f7ff fb53 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	f040 810c 	bne.w	80033a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a2:	415b      	adcs	r3, r3
 80031a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031aa:	4621      	mov	r1, r4
 80031ac:	eb12 0801 	adds.w	r8, r2, r1
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb43 0901 	adc.w	r9, r3, r1
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ca:	4690      	mov	r8, r2
 80031cc:	4699      	mov	r9, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	eb18 0303 	adds.w	r3, r8, r3
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031d8:	462b      	mov	r3, r5
 80031da:	eb49 0303 	adc.w	r3, r9, r3
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031f6:	460b      	mov	r3, r1
 80031f8:	18db      	adds	r3, r3, r3
 80031fa:	653b      	str	r3, [r7, #80]	; 0x50
 80031fc:	4613      	mov	r3, r2
 80031fe:	eb42 0303 	adc.w	r3, r2, r3
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
 8003204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800320c:	f7fd f848 	bl	80002a0 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <UART_SetConfig+0x2d4>)
 8003216:	fba3 2302 	umull	r2, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	011c      	lsls	r4, r3, #4
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800322c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	64b9      	str	r1, [r7, #72]	; 0x48
 8003238:	415b      	adcs	r3, r3
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003240:	4641      	mov	r1, r8
 8003242:	eb12 0a01 	adds.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb43 0b01 	adc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800325c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003260:	4692      	mov	sl, r2
 8003262:	469b      	mov	fp, r3
 8003264:	4643      	mov	r3, r8
 8003266:	eb1a 0303 	adds.w	r3, sl, r3
 800326a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800326e:	464b      	mov	r3, r9
 8003270:	eb4b 0303 	adc.w	r3, fp, r3
 8003274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800328c:	460b      	mov	r3, r1
 800328e:	18db      	adds	r3, r3, r3
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
 8003292:	4613      	mov	r3, r2
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	647b      	str	r3, [r7, #68]	; 0x44
 800329a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800329e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032a2:	f7fc fffd 	bl	80002a0 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	4b3b      	ldr	r3, [pc, #236]	; (800339c <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2301 	umull	r2, r3, r3, r1
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2264      	movs	r2, #100	; 0x64
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	1acb      	subs	r3, r1, r3
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <UART_SetConfig+0x2d4>)
 80032c4:	fba3 2302 	umull	r2, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d0:	441c      	add	r4, r3
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80032ec:	415b      	adcs	r3, r3
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f4:	4641      	mov	r1, r8
 80032f6:	1851      	adds	r1, r2, r1
 80032f8:	6339      	str	r1, [r7, #48]	; 0x30
 80032fa:	4649      	mov	r1, r9
 80032fc:	414b      	adcs	r3, r1
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800330c:	4659      	mov	r1, fp
 800330e:	00cb      	lsls	r3, r1, #3
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003316:	4651      	mov	r1, sl
 8003318:	00ca      	lsls	r2, r1, #3
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	4603      	mov	r3, r0
 8003320:	4642      	mov	r2, r8
 8003322:	189b      	adds	r3, r3, r2
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003328:	464b      	mov	r3, r9
 800332a:	460a      	mov	r2, r1
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800335e:	f7fc ff9f 	bl	80002a0 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <UART_SetConfig+0x2d4>)
 8003368:	fba3 1302 	umull	r1, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <UART_SetConfig+0x2d4>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4422      	add	r2, r4
 800338e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003390:	e105      	b.n	800359e <UART_SetConfig+0x4d6>
 8003392:	bf00      	nop
 8003394:	40011000 	.word	0x40011000
 8003398:	40011400 	.word	0x40011400
 800339c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033b2:	4642      	mov	r2, r8
 80033b4:	464b      	mov	r3, r9
 80033b6:	1891      	adds	r1, r2, r2
 80033b8:	6239      	str	r1, [r7, #32]
 80033ba:	415b      	adcs	r3, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c2:	4641      	mov	r1, r8
 80033c4:	1854      	adds	r4, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb43 0501 	adc.w	r5, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	00eb      	lsls	r3, r5, #3
 80033d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033da:	00e2      	lsls	r2, r4, #3
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4643      	mov	r3, r8
 80033e2:	18e3      	adds	r3, r4, r3
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033e8:	464b      	mov	r3, r9
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800340e:	4629      	mov	r1, r5
 8003410:	008b      	lsls	r3, r1, #2
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003418:	4621      	mov	r1, r4
 800341a:	008a      	lsls	r2, r1, #2
 800341c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003420:	f7fc ff3e 	bl	80002a0 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <UART_SetConfig+0x4e4>)
 800342a:	fba3 2302 	umull	r2, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	011c      	lsls	r4, r3, #4
 8003432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003436:	2200      	movs	r2, #0
 8003438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800343c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	1891      	adds	r1, r2, r2
 800344a:	61b9      	str	r1, [r7, #24]
 800344c:	415b      	adcs	r3, r3
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003454:	4641      	mov	r1, r8
 8003456:	1851      	adds	r1, r2, r1
 8003458:	6139      	str	r1, [r7, #16]
 800345a:	4649      	mov	r1, r9
 800345c:	414b      	adcs	r3, r1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800346c:	4659      	mov	r1, fp
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4651      	mov	r1, sl
 8003472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003476:	4651      	mov	r1, sl
 8003478:	00ca      	lsls	r2, r1, #3
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	4603      	mov	r3, r0
 8003480:	4642      	mov	r2, r8
 8003482:	189b      	adds	r3, r3, r2
 8003484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003488:	464b      	mov	r3, r9
 800348a:	460a      	mov	r2, r1
 800348c:	eb42 0303 	adc.w	r3, r2, r3
 8003490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	67bb      	str	r3, [r7, #120]	; 0x78
 800349e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034ac:	4649      	mov	r1, r9
 80034ae:	008b      	lsls	r3, r1, #2
 80034b0:	4641      	mov	r1, r8
 80034b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b6:	4641      	mov	r1, r8
 80034b8:	008a      	lsls	r2, r1, #2
 80034ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034be:	f7fc feef 	bl	80002a0 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <UART_SetConfig+0x4e4>)
 80034c8:	fba3 1302 	umull	r1, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	2164      	movs	r1, #100	; 0x64
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	3332      	adds	r3, #50	; 0x32
 80034da:	4a34      	ldr	r2, [pc, #208]	; (80035ac <UART_SetConfig+0x4e4>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e6:	441c      	add	r4, r3
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	673b      	str	r3, [r7, #112]	; 0x70
 80034f0:	677a      	str	r2, [r7, #116]	; 0x74
 80034f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	415b      	adcs	r3, r3
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003506:	4641      	mov	r1, r8
 8003508:	1851      	adds	r1, r2, r1
 800350a:	6039      	str	r1, [r7, #0]
 800350c:	4649      	mov	r1, r9
 800350e:	414b      	adcs	r3, r1
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800351e:	4659      	mov	r1, fp
 8003520:	00cb      	lsls	r3, r1, #3
 8003522:	4651      	mov	r1, sl
 8003524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003528:	4651      	mov	r1, sl
 800352a:	00ca      	lsls	r2, r1, #3
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	4603      	mov	r3, r0
 8003532:	4642      	mov	r2, r8
 8003534:	189b      	adds	r3, r3, r2
 8003536:	66bb      	str	r3, [r7, #104]	; 0x68
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	663b      	str	r3, [r7, #96]	; 0x60
 800354c:	667a      	str	r2, [r7, #100]	; 0x64
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800355a:	4649      	mov	r1, r9
 800355c:	008b      	lsls	r3, r1, #2
 800355e:	4641      	mov	r1, r8
 8003560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003564:	4641      	mov	r1, r8
 8003566:	008a      	lsls	r2, r1, #2
 8003568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800356c:	f7fc fe98 	bl	80002a0 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <UART_SetConfig+0x4e4>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2164      	movs	r1, #100	; 0x64
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3332      	adds	r3, #50	; 0x32
 8003588:	4a08      	ldr	r2, [pc, #32]	; (80035ac <UART_SetConfig+0x4e4>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4422      	add	r2, r4
 800359c:	609a      	str	r2, [r3, #8]
}
 800359e:	bf00      	nop
 80035a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	51eb851f 	.word	0x51eb851f

080035b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b0:	b084      	sub	sp, #16
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	f107 001c 	add.w	r0, r7, #28
 80035be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d122      	bne.n	800360e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 faa2 	bl	8003b4c <USB_CoreReset>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	e01a      	b.n	8003644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa96 	bl	8003b4c <USB_CoreReset>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
 8003636:	e005      	b.n	8003644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10b      	bne.n	8003662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f043 0206 	orr.w	r2, r3, #6
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800366e:	b004      	add	sp, #16
 8003670:	4770      	bx	lr

08003672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d115      	bne.n	80036e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f7fd fd26 	bl	8001114 <HAL_Delay>
      ms++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa2e 	bl	8003b30 <USB_GetMode>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d01e      	beq.n	8003718 <USB_SetCurrentMode+0x84>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b31      	cmp	r3, #49	; 0x31
 80036de:	d9f0      	bls.n	80036c2 <USB_SetCurrentMode+0x2e>
 80036e0:	e01a      	b.n	8003718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7fd fd0d 	bl	8001114 <HAL_Delay>
      ms++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa15 	bl	8003b30 <USB_GetMode>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <USB_SetCurrentMode+0x84>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b31      	cmp	r3, #49	; 0x31
 8003710:	d9f0      	bls.n	80036f4 <USB_SetCurrentMode+0x60>
 8003712:	e001      	b.n	8003718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e005      	b.n	8003724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b32      	cmp	r3, #50	; 0x32
 800371c:	d101      	bne.n	8003722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800372c:	b084      	sub	sp, #16
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800373a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e009      	b.n	8003760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3340      	adds	r3, #64	; 0x40
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3301      	adds	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0e      	cmp	r3, #14
 8003764:	d9f2      	bls.n	800374c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11c      	bne.n	80037a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
 80037a4:	e00b      	b.n	80037be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d0:	4619      	mov	r1, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	461a      	mov	r2, r3
 80037da:	680b      	ldr	r3, [r1, #0]
 80037dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10c      	bne.n	80037fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037ea:	2100      	movs	r1, #0
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f965 	bl	8003abc <USB_SetDevSpeed>
 80037f2:	e008      	b.n	8003806 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037f4:	2101      	movs	r1, #1
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f960 	bl	8003abc <USB_SetDevSpeed>
 80037fc:	e003      	b.n	8003806 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037fe:	2103      	movs	r1, #3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f95b 	bl	8003abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003806:	2110      	movs	r1, #16
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8f3 	bl	80039f4 <USB_FlushTxFifo>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f91f 	bl	8003a5c <USB_FlushRxFifo>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e043      	b.n	80038da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003868:	d118      	bne.n	800389c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	461a      	mov	r2, r3
 800387e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e013      	b.n	80038ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	461a      	mov	r2, r3
 8003894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e008      	b.n	80038ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	461a      	mov	r2, r3
 80038bc:	2300      	movs	r3, #0
 80038be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038cc:	461a      	mov	r2, r3
 80038ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	3301      	adds	r3, #1
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d3b7      	bcc.n	8003852 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e043      	b.n	8003970 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fe:	d118      	bne.n	8003932 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e013      	b.n	8003944 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e008      	b.n	8003944 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	461a      	mov	r2, r3
 8003940:	2300      	movs	r3, #0
 8003942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	2300      	movs	r3, #0
 8003954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3301      	adds	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	429a      	cmp	r2, r3
 8003976:	d3b7      	bcc.n	80038e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800398a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <USB_DevInit+0x2c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f043 0208 	orr.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ec:	b004      	add	sp, #16
 80039ee:	4770      	bx	lr
 80039f0:	803c3800 	.word	0x803c3800

080039f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <USB_FlushTxFifo+0x64>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e01b      	b.n	8003a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	daf2      	bge.n	8003a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	019b      	lsls	r3, r3, #6
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <USB_FlushTxFifo+0x64>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e006      	b.n	8003a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d0f0      	beq.n	8003a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	00030d40 	.word	0x00030d40

08003a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <USB_FlushRxFifo+0x5c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e018      	b.n	8003aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	daf2      	bge.n	8003a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <USB_FlushRxFifo+0x5c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e006      	b.n	8003aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d0f0      	beq.n	8003a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	00030d40 	.word	0x00030d40

08003abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b08:	f023 0303 	bic.w	r3, r3, #3
 8003b0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <USB_CoreReset+0x64>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e01b      	b.n	8003ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	daf2      	bge.n	8003b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <USB_CoreReset+0x64>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d0f0      	beq.n	8003b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	00030d40 	.word	0x00030d40

08003bb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc6:	2b84      	cmp	r3, #132	; 0x84
 8003bc8:	d005      	beq.n	8003bd6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3303      	adds	r3, #3
 8003bd4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bea:	f3ef 8305 	mrs	r3, IPSR
 8003bee:	607b      	str	r3, [r7, #4]
  return(result);
 8003bf0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c0c:	f000 facc 	bl	80041a8 <vTaskStartScheduler>
  
  return osOK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003c1a:	f7ff ffe3 	bl	8003be4 <inHandlerMode>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003c24:	f000 fbca 	bl	80043bc <xTaskGetTickCountFromISR>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	e002      	b.n	8003c32 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003c2c:	f000 fbb6 	bl	800439c <xTaskGetTickCount>
 8003c30:	4603      	mov	r3, r0
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685c      	ldr	r4, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c4c:	b29e      	uxth	r6, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ffad 	bl	8003bb4 <makeFreeRtosPriority>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	9200      	str	r2, [sp, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4632      	mov	r2, r6
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 f8d4 	bl	8003e18 <xTaskCreate>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c84 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <osDelayUntil+0x18>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e000      	b.n	8003c9e <osDelayUntil+0x1a>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa03 	bl	80040ac <vTaskDelayUntil>
  
  return osOK;
 8003ca6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f103 0208 	add.w	r2, r3, #8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f103 0208 	add.w	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f103 0208 	add.w	r2, r3, #8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d103      	bne.n	8003d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e00c      	b.n	8003d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3308      	adds	r3, #8
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e002      	b.n	8003d80 <vListInsert+0x2e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d2f6      	bcs.n	8003d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6852      	ldr	r2, [r2, #4]
 8003de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d103      	bne.n	8003df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	; 0x30
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 ff83 	bl	8004d38 <pvPortMalloc>
 8003e32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00e      	beq.n	8003e58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e3a:	20b4      	movs	r0, #180	; 0xb4
 8003e3c:	f000 ff7c 	bl	8004d38 <pvPortMalloc>
 8003e40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e4e:	e005      	b.n	8003e5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f001 f83d 	bl	8004ed0 <vPortFree>
 8003e56:	e001      	b.n	8003e5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d013      	beq.n	8003e8a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	2300      	movs	r3, #0
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f80f 	bl	8003e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e7e:	69f8      	ldr	r0, [r7, #28]
 8003e80:	f000 f8aa 	bl	8003fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e84:	2301      	movs	r3, #1
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e002      	b.n	8003e90 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e90:	69bb      	ldr	r3, [r7, #24]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01f      	beq.n	8003f2a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e012      	b.n	8003f16 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	7819      	ldrb	r1, [r3, #0]
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	3334      	adds	r3, #52	; 0x34
 8003f00:	460a      	mov	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d9e9      	bls.n	8003ef0 <prvInitialiseNewTask+0x54>
 8003f1c:	e000      	b.n	8003f20 <prvInitialiseNewTask+0x84>
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f28:	e003      	b.n	8003f32 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d901      	bls.n	8003f3c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f38:	2306      	movs	r3, #6
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fecc 	bl	8003cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fec7 	bl	8003cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f1c3 0207 	rsb	r2, r3, #7
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	334c      	adds	r3, #76	; 0x4c
 8003f8c:	2260      	movs	r2, #96	; 0x60
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f8f5 	bl	8005180 <memset>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <prvInitialiseNewTask+0x130>)
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <prvInitialiseNewTask+0x134>)
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <prvInitialiseNewTask+0x138>)
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	69b8      	ldr	r0, [r7, #24]
 8003fae:	f000 fc77 	bl	80048a0 <pxPortInitialiseStack>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc4:	bf00      	nop
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08005cb0 	.word	0x08005cb0
 8003fd0:	08005cd0 	.word	0x08005cd0
 8003fd4:	08005c90 	.word	0x08005c90

08003fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fe0:	f000 fd88 	bl	8004af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <prvAddNewTaskToReadyList+0xb8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a29      	ldr	r2, [pc, #164]	; (8004090 <prvAddNewTaskToReadyList+0xb8>)
 8003fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <prvAddNewTaskToReadyList+0xbc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <prvAddNewTaskToReadyList+0xbc>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <prvAddNewTaskToReadyList+0xb8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d110      	bne.n	8004026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004004:	f000 fb42 	bl	800468c <prvInitialiseTaskLists>
 8004008:	e00d      	b.n	8004026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <prvAddNewTaskToReadyList+0xc0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <prvAddNewTaskToReadyList+0xbc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	429a      	cmp	r2, r3
 800401e:	d802      	bhi.n	8004026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004020:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <prvAddNewTaskToReadyList+0xbc>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <prvAddNewTaskToReadyList+0xc4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <prvAddNewTaskToReadyList+0xc4>)
 800402e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <prvAddNewTaskToReadyList+0xc8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4313      	orrs	r3, r2
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <prvAddNewTaskToReadyList+0xc8>)
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <prvAddNewTaskToReadyList+0xcc>)
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff fe56 	bl	8003d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800405e:	f000 fd79 	bl	8004b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <prvAddNewTaskToReadyList+0xc0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <prvAddNewTaskToReadyList+0xbc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d207      	bcs.n	8004088 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <prvAddNewTaskToReadyList+0xd0>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200009a4 	.word	0x200009a4
 8004094:	200008a4 	.word	0x200008a4
 8004098:	200009b0 	.word	0x200009b0
 800409c:	200009c0 	.word	0x200009c0
 80040a0:	200009ac 	.word	0x200009ac
 80040a4:	200008a8 	.word	0x200008a8
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	617b      	str	r3, [r7, #20]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <vTaskDelayUntil+0x46>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	613b      	str	r3, [r7, #16]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <vTaskDelayUntil+0xf0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <vTaskDelayUntil+0x64>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	60fb      	str	r3, [r7, #12]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004110:	f000 f89a 	bl	8004248 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <vTaskDelayUntil+0xf4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4413      	add	r3, r2
 8004122:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	429a      	cmp	r2, r3
 800412c:	d20b      	bcs.n	8004146 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	429a      	cmp	r2, r3
 8004136:	d211      	bcs.n	800415c <vTaskDelayUntil+0xb0>
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	429a      	cmp	r2, r3
 800413e:	d90d      	bls.n	800415c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	e00a      	b.n	800415c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	d303      	bcc.n	8004158 <vTaskDelayUntil+0xac>
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	429a      	cmp	r2, r3
 8004156:	d901      	bls.n	800415c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fb2f 	bl	80047d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004176:	f000 f875 	bl	8004264 <xTaskResumeAll>
 800417a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d107      	bne.n	8004192 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <vTaskDelayUntil+0xf8>)
 8004184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004192:	bf00      	nop
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200009cc 	.word	0x200009cc
 80041a0:	200009a8 	.word	0x200009a8
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <vTaskStartScheduler+0x80>)
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	491c      	ldr	r1, [pc, #112]	; (800422c <vTaskStartScheduler+0x84>)
 80041bc:	481c      	ldr	r0, [pc, #112]	; (8004230 <vTaskStartScheduler+0x88>)
 80041be:	f7ff fe2b 	bl	8003e18 <xTaskCreate>
 80041c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d11b      	bne.n	8004202 <vTaskStartScheduler+0x5a>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60bb      	str	r3, [r7, #8]
}
 80041dc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <vTaskStartScheduler+0x8c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	334c      	adds	r3, #76	; 0x4c
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <vTaskStartScheduler+0x90>)
 80041e6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <vTaskStartScheduler+0x94>)
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <vTaskStartScheduler+0x98>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <vTaskStartScheduler+0x9c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041fc:	f000 fbd8 	bl	80049b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004200:	e00e      	b.n	8004220 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d10a      	bne.n	8004220 <vTaskStartScheduler+0x78>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	607b      	str	r3, [r7, #4]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <vTaskStartScheduler+0x76>
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200009c8 	.word	0x200009c8
 800422c:	08005c70 	.word	0x08005c70
 8004230:	0800465d 	.word	0x0800465d
 8004234:	200008a4 	.word	0x200008a4
 8004238:	20000048 	.word	0x20000048
 800423c:	200009c4 	.word	0x200009c4
 8004240:	200009b0 	.word	0x200009b0
 8004244:	200009a8 	.word	0x200009a8

08004248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <vTaskSuspendAll+0x18>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a03      	ldr	r2, [pc, #12]	; (8004260 <vTaskSuspendAll+0x18>)
 8004254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	200009cc 	.word	0x200009cc

08004264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004272:	4b41      	ldr	r3, [pc, #260]	; (8004378 <xTaskResumeAll+0x114>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <xTaskResumeAll+0x2c>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	603b      	str	r3, [r7, #0]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004290:	f000 fc30 	bl	8004af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004294:	4b38      	ldr	r3, [pc, #224]	; (8004378 <xTaskResumeAll+0x114>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3b01      	subs	r3, #1
 800429a:	4a37      	ldr	r2, [pc, #220]	; (8004378 <xTaskResumeAll+0x114>)
 800429c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <xTaskResumeAll+0x114>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d161      	bne.n	800436a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <xTaskResumeAll+0x118>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d05d      	beq.n	800436a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ae:	e02e      	b.n	800430e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <xTaskResumeAll+0x11c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3318      	adds	r3, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd81 	bl	8003dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fd7c 	bl	8003dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	2201      	movs	r2, #1
 80042d2:	409a      	lsls	r2, r3
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <xTaskResumeAll+0x120>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4313      	orrs	r3, r2
 80042da:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <xTaskResumeAll+0x120>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4a27      	ldr	r2, [pc, #156]	; (8004388 <xTaskResumeAll+0x124>)
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7ff fd08 	bl	8003d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <xTaskResumeAll+0x128>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <xTaskResumeAll+0x12c>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <xTaskResumeAll+0x11c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1cc      	bne.n	80042b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800431c:	f000 fa3a 	bl	8004794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <xTaskResumeAll+0x130>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800432c:	f000 f87c 	bl	8004428 <xTaskIncrementTick>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <xTaskResumeAll+0x12c>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f1      	bne.n	800432c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <xTaskResumeAll+0x130>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <xTaskResumeAll+0x12c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <xTaskResumeAll+0x134>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800436a:	f000 fbf3 	bl	8004b54 <vPortExitCritical>

	return xAlreadyYielded;
 800436e:	68bb      	ldr	r3, [r7, #8]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	200009cc 	.word	0x200009cc
 800437c:	200009a4 	.word	0x200009a4
 8004380:	20000964 	.word	0x20000964
 8004384:	200009ac 	.word	0x200009ac
 8004388:	200008a8 	.word	0x200008a8
 800438c:	200008a4 	.word	0x200008a4
 8004390:	200009b8 	.word	0x200009b8
 8004394:	200009b4 	.word	0x200009b4
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <xTaskGetTickCount+0x1c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043a8:	687b      	ldr	r3, [r7, #4]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	200009a8 	.word	0x200009a8

080043bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043c2:	f000 fc79 	bl	8004cb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <xTaskGetTickCountFromISR+0x20>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043d0:	683b      	ldr	r3, [r7, #0]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200009a8 	.word	0x200009a8

080043e0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <pcTaskGetName+0x14>
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <pcTaskGetName+0x44>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e000      	b.n	80043f6 <pcTaskGetName+0x16>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <pcTaskGetName+0x34>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60bb      	str	r3, [r7, #8]
}
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3334      	adds	r3, #52	; 0x34
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	200008a4 	.word	0x200008a4

08004428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004432:	4b4e      	ldr	r3, [pc, #312]	; (800456c <xTaskIncrementTick+0x144>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 808e 	bne.w	8004558 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800443c:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <xTaskIncrementTick+0x148>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004444:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <xTaskIncrementTick+0x148>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d120      	bne.n	8004492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004450:	4b48      	ldr	r3, [pc, #288]	; (8004574 <xTaskIncrementTick+0x14c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <xTaskIncrementTick+0x48>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	603b      	str	r3, [r7, #0]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xTaskIncrementTick+0x46>
 8004470:	4b40      	ldr	r3, [pc, #256]	; (8004574 <xTaskIncrementTick+0x14c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b40      	ldr	r3, [pc, #256]	; (8004578 <xTaskIncrementTick+0x150>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3e      	ldr	r2, [pc, #248]	; (8004574 <xTaskIncrementTick+0x14c>)
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4a3e      	ldr	r2, [pc, #248]	; (8004578 <xTaskIncrementTick+0x150>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b3d      	ldr	r3, [pc, #244]	; (800457c <xTaskIncrementTick+0x154>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	4a3c      	ldr	r2, [pc, #240]	; (800457c <xTaskIncrementTick+0x154>)
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	f000 f981 	bl	8004794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <xTaskIncrementTick+0x158>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d348      	bcc.n	800452e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <xTaskIncrementTick+0x14c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <xTaskIncrementTick+0x158>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	601a      	str	r2, [r3, #0]
					break;
 80044ae:	e03e      	b.n	800452e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <xTaskIncrementTick+0x14c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d203      	bcs.n	80044d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c8:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <xTaskIncrementTick+0x158>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044ce:	e02e      	b.n	800452e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fc75 	bl	8003dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3318      	adds	r3, #24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fc6c 	bl	8003dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <xTaskIncrementTick+0x15c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a22      	ldr	r2, [pc, #136]	; (8004584 <xTaskIncrementTick+0x15c>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <xTaskIncrementTick+0x160>)
 800450c:	441a      	add	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fbf8 	bl	8003d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xTaskIncrementTick+0x164>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	429a      	cmp	r2, r3
 8004526:	d3b9      	bcc.n	800449c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452c:	e7b6      	b.n	800449c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <xTaskIncrementTick+0x164>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4914      	ldr	r1, [pc, #80]	; (8004588 <xTaskIncrementTick+0x160>)
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d901      	bls.n	800454a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <xTaskIncrementTick+0x168>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e004      	b.n	8004562 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <xTaskIncrementTick+0x16c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <xTaskIncrementTick+0x16c>)
 8004560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	200009cc 	.word	0x200009cc
 8004570:	200009a8 	.word	0x200009a8
 8004574:	2000095c 	.word	0x2000095c
 8004578:	20000960 	.word	0x20000960
 800457c:	200009bc 	.word	0x200009bc
 8004580:	200009c4 	.word	0x200009c4
 8004584:	200009ac 	.word	0x200009ac
 8004588:	200008a8 	.word	0x200008a8
 800458c:	200008a4 	.word	0x200008a4
 8004590:	200009b8 	.word	0x200009b8
 8004594:	200009b4 	.word	0x200009b4

08004598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <vTaskSwitchContext+0xac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <vTaskSwitchContext+0xb0>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045ac:	e044      	b.n	8004638 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <vTaskSwitchContext+0xb0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <vTaskSwitchContext+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	f1c3 031f 	rsb	r3, r3, #31
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	4921      	ldr	r1, [pc, #132]	; (8004650 <vTaskSwitchContext+0xb8>)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vTaskSwitchContext+0x5a>
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4a14      	ldr	r2, [pc, #80]	; (8004650 <vTaskSwitchContext+0xb8>)
 8004600:	4413      	add	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3308      	adds	r3, #8
 8004616:	429a      	cmp	r2, r3
 8004618:	d104      	bne.n	8004624 <vTaskSwitchContext+0x8c>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <vTaskSwitchContext+0xbc>)
 800462c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <vTaskSwitchContext+0xbc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	334c      	adds	r3, #76	; 0x4c
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <vTaskSwitchContext+0xc0>)
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	200009cc 	.word	0x200009cc
 8004648:	200009b8 	.word	0x200009b8
 800464c:	200009ac 	.word	0x200009ac
 8004650:	200008a8 	.word	0x200008a8
 8004654:	200008a4 	.word	0x200008a4
 8004658:	20000048 	.word	0x20000048

0800465c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004664:	f000 f852 	bl	800470c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <prvIdleTask+0x28>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d9f9      	bls.n	8004664 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <prvIdleTask+0x2c>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004680:	e7f0      	b.n	8004664 <prvIdleTask+0x8>
 8004682:	bf00      	nop
 8004684:	200008a8 	.word	0x200008a8
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	e00c      	b.n	80046b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <prvInitialiseTaskLists+0x60>)
 80046a4:	4413      	add	r3, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb02 	bl	8003cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3301      	adds	r3, #1
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d9ef      	bls.n	8004698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046b8:	480d      	ldr	r0, [pc, #52]	; (80046f0 <prvInitialiseTaskLists+0x64>)
 80046ba:	f7ff faf9 	bl	8003cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046be:	480d      	ldr	r0, [pc, #52]	; (80046f4 <prvInitialiseTaskLists+0x68>)
 80046c0:	f7ff faf6 	bl	8003cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046c4:	480c      	ldr	r0, [pc, #48]	; (80046f8 <prvInitialiseTaskLists+0x6c>)
 80046c6:	f7ff faf3 	bl	8003cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ca:	480c      	ldr	r0, [pc, #48]	; (80046fc <prvInitialiseTaskLists+0x70>)
 80046cc:	f7ff faf0 	bl	8003cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046d0:	480b      	ldr	r0, [pc, #44]	; (8004700 <prvInitialiseTaskLists+0x74>)
 80046d2:	f7ff faed 	bl	8003cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <prvInitialiseTaskLists+0x78>)
 80046d8:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <prvInitialiseTaskLists+0x64>)
 80046da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <prvInitialiseTaskLists+0x7c>)
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <prvInitialiseTaskLists+0x68>)
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	200008a8 	.word	0x200008a8
 80046f0:	20000934 	.word	0x20000934
 80046f4:	20000948 	.word	0x20000948
 80046f8:	20000964 	.word	0x20000964
 80046fc:	20000978 	.word	0x20000978
 8004700:	20000990 	.word	0x20000990
 8004704:	2000095c 	.word	0x2000095c
 8004708:	20000960 	.word	0x20000960

0800470c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004712:	e019      	b.n	8004748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004714:	f000 f9ee 	bl	8004af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <prvCheckTasksWaitingTermination+0x50>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fb4d 	bl	8003dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <prvCheckTasksWaitingTermination+0x54>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <prvCheckTasksWaitingTermination+0x54>)
 8004732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <prvCheckTasksWaitingTermination+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3b01      	subs	r3, #1
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <prvCheckTasksWaitingTermination+0x58>)
 800473c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800473e:	f000 fa09 	bl	8004b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f810 	bl	8004768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <prvCheckTasksWaitingTermination+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e1      	bne.n	8004714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000978 	.word	0x20000978
 8004760:	200009a4 	.word	0x200009a4
 8004764:	2000098c 	.word	0x2000098c

08004768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	334c      	adds	r3, #76	; 0x4c
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fdad 	bl	80052d4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fba6 	bl	8004ed0 <vPortFree>
			vPortFree( pxTCB );
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fba3 	bl	8004ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <prvResetNextTaskUnblockTime+0x38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <prvResetNextTaskUnblockTime+0x3c>)
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047ac:	e008      	b.n	80047c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <prvResetNextTaskUnblockTime+0x38>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <prvResetNextTaskUnblockTime+0x3c>)
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	2000095c 	.word	0x2000095c
 80047d0:	200009c4 	.word	0x200009c4

080047d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e4:	4b28      	ldr	r3, [pc, #160]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff faea 	bl	8003dc4 <uxListRemove>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	2201      	movs	r2, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	4b21      	ldr	r3, [pc, #132]	; (800488c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <prvAddCurrentTaskToDelayedList+0xb8>)
 800480c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d10a      	bne.n	800482c <prvAddCurrentTaskToDelayedList+0x58>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481c:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3304      	adds	r3, #4
 8004822:	4619      	mov	r1, r3
 8004824:	481a      	ldr	r0, [pc, #104]	; (8004890 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004826:	f7ff fa70 	bl	8003d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800482a:	e026      	b.n	800487a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	429a      	cmp	r2, r3
 8004842:	d209      	bcs.n	8004858 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff fa7e 	bl	8003d52 <vListInsert>
}
 8004856:	e010      	b.n	800487a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <prvAddCurrentTaskToDelayedList+0xc4>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7ff fa74 	bl	8003d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <prvAddCurrentTaskToDelayedList+0xc8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	d202      	bcs.n	800487a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004874:	4a09      	ldr	r2, [pc, #36]	; (800489c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200009a8 	.word	0x200009a8
 8004888:	200008a4 	.word	0x200008a4
 800488c:	200009ac 	.word	0x200009ac
 8004890:	20000990 	.word	0x20000990
 8004894:	20000960 	.word	0x20000960
 8004898:	2000095c 	.word	0x2000095c
 800489c:	200009c4 	.word	0x200009c4

080048a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b04      	subs	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b04      	subs	r3, #4
 80048be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b04      	subs	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048d0:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <pxPortInitialiseStack+0x64>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b14      	subs	r3, #20
 80048da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b04      	subs	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f06f 0202 	mvn.w	r2, #2
 80048ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b20      	subs	r3, #32
 80048f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	08004909 	.word	0x08004909

08004908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <prvTaskExitError+0x54>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d00a      	beq.n	8004932 <prvTaskExitError+0x2a>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <prvTaskExitError+0x28>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60bb      	str	r3, [r7, #8]
}
 8004944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004946:	bf00      	nop
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0fc      	beq.n	8004948 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000044 	.word	0x20000044

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	bf00      	nop
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049b6:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a46      	ldr	r2, [pc, #280]	; (8004ad4 <xPortStartScheduler+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10a      	bne.n	80049d6 <xPortStartScheduler+0x26>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049d6:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <xPortStartScheduler+0x128>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x46>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <xPortStartScheduler+0x12c>)
 80049f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <xPortStartScheduler+0x130>)
 8004a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a24:	e009      	b.n	8004a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d0ef      	beq.n	8004a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00a      	beq.n	8004a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60bb      	str	r3, [r7, #8]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a9e:	f000 f8dd 	bl	8004c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <xPortStartScheduler+0x13c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aa8:	f000 f8fc 	bl	8004ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <xPortStartScheduler+0x140>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <xPortStartScheduler+0x140>)
 8004ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ab8:	f7ff ff66 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004abc:	f7ff fd6c 	bl	8004598 <vTaskSwitchContext>
	prvTaskExitError();
 8004ac0:	f7ff ff22 	bl	8004908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000ed00 	.word	0xe000ed00
 8004ad4:	410fc271 	.word	0x410fc271
 8004ad8:	410fc270 	.word	0x410fc270
 8004adc:	e000e400 	.word	0xe000e400
 8004ae0:	200009d0 	.word	0x200009d0
 8004ae4:	200009d4 	.word	0x200009d4
 8004ae8:	e000ed20 	.word	0xe000ed20
 8004aec:	20000044 	.word	0x20000044
 8004af0:	e000ef34 	.word	0xe000ef34

08004af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10f      	bne.n	8004b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortEnterCritical+0x5c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	603b      	str	r3, [r7, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vPortEnterCritical+0x4a>
	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000044 	.word	0x20000044
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <vPortExitCritical+0x24>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <vPortExitCritical+0x42>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000044 	.word	0x20000044
	...

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f01e 0f10 	tst.w	lr, #16
 8004bc0:	bf08      	it	eq
 8004bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bd4:	f380 8811 	msr	BASEPRI, r0
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f7ff fcda 	bl	8004598 <vTaskSwitchContext>
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f380 8811 	msr	BASEPRI, r0
 8004bec:	bc09      	pop	{r0, r3}
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	6808      	ldr	r0, [r1, #0]
 8004bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	f01e 0f10 	tst.w	lr, #16
 8004bfa:	bf08      	it	eq
 8004bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c00:	f380 8809 	msr	PSP, r0
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst>:
 8004c10:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c32:	f7ff fbf9 	bl	8004428 <xTaskIncrementTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <SysTick_Handler+0x40>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <vPortSetupTimerInterrupt+0x38>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <vPortSetupTimerInterrupt+0x3c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <vPortSetupTimerInterrupt+0x40>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <vPortSetupTimerInterrupt+0x44>)
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010
 8004c94:	e000e018 	.word	0xe000e018
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	10624dd3 	.word	0x10624dd3
 8004ca0:	e000e014 	.word	0xe000e014

08004ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cb4 <vPortEnableVFP+0x10>
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cae:	6001      	str	r1, [r0, #0]
 8004cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed88 	.word	0xe000ed88

08004cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d914      	bls.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <vPortValidateInterruptPriority+0x70>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <vPortValidateInterruptPriority+0x74>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7afa      	ldrb	r2, [r7, #11]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20a      	bcs.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <vPortValidateInterruptPriority+0x78>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <vPortValidateInterruptPriority+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d90a      	bls.n	8004d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	603b      	str	r3, [r7, #0]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <vPortValidateInterruptPriority+0x60>
	}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e3f0 	.word	0xe000e3f0
 8004d2c:	200009d0 	.word	0x200009d0
 8004d30:	e000ed0c 	.word	0xe000ed0c
 8004d34:	200009d4 	.word	0x200009d4

08004d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d44:	f7ff fa80 	bl	8004248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d48:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <pvPortMalloc+0x180>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d50:	f000 f920 	bl	8004f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <pvPortMalloc+0x184>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8093 	bne.w	8004e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d68:	2208      	movs	r2, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <pvPortMalloc+0x6c>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06e      	beq.n	8004e88 <pvPortMalloc+0x150>
 8004daa:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <pvPortMalloc+0x188>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d869      	bhi.n	8004e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004db4:	4b43      	ldr	r3, [pc, #268]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004db8:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dbe:	e004      	b.n	8004dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d903      	bls.n	8004ddc <pvPortMalloc+0xa4>
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f1      	bne.n	8004dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ddc:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <pvPortMalloc+0x180>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d050      	beq.n	8004e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2208      	movs	r2, #8
 8004dec:	4413      	add	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	2308      	movs	r3, #8
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d91f      	bls.n	8004e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <pvPortMalloc+0xf8>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	613b      	str	r3, [r7, #16]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f000 f908 	bl	8005058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e48:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d203      	bcs.n	8004e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <pvPortMalloc+0x184>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <pvPortMalloc+0x194>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <pvPortMalloc+0x194>)
 8004e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e88:	f7ff f9ec 	bl	8004264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <pvPortMalloc+0x174>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <pvPortMalloc+0x172>
	return pvReturn;
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200045e0 	.word	0x200045e0
 8004ebc:	200045f4 	.word	0x200045f4
 8004ec0:	200045e4 	.word	0x200045e4
 8004ec4:	200045d8 	.word	0x200045d8
 8004ec8:	200045e8 	.word	0x200045e8
 8004ecc:	200045ec 	.word	0x200045ec

08004ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04d      	beq.n	8004f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <vPortFree+0xb8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vPortFree+0x44>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	60fb      	str	r3, [r7, #12]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <vPortFree+0x62>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60bb      	str	r3, [r7, #8]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <vPortFree+0xb8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <vPortFree+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f58:	f7ff f976 	bl	8004248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <vPortFree+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <vPortFree+0xbc>)
 8004f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f000 f874 	bl	8005058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vPortFree+0xc0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vPortFree+0xc0>)
 8004f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f7a:	f7ff f973 	bl	8004264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200045f4 	.word	0x200045f4
 8004f8c:	200045e4 	.word	0x200045e4
 8004f90:	200045f0 	.word	0x200045f0

08004f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvHeapInit+0xac>)
 8004fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <prvHeapInit+0xac>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <prvHeapInit+0xb0>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <prvHeapInit+0xb0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <prvHeapInit+0xb4>)
 8004ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <prvHeapInit+0xb4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvHeapInit+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <prvHeapInit+0xb4>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <prvHeapInit+0xb8>)
 8005022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvHeapInit+0xbc>)
 800502a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvHeapInit+0xc0>)
 800502e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200009d8 	.word	0x200009d8
 8005044:	200045d8 	.word	0x200045d8
 8005048:	200045e0 	.word	0x200045e0
 800504c:	200045e8 	.word	0x200045e8
 8005050:	200045e4 	.word	0x200045e4
 8005054:	200045f4 	.word	0x200045f4

08005058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvInsertBlockIntoFreeList+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e002      	b.n	800506c <prvInsertBlockIntoFreeList+0x14>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d8f7      	bhi.n	8005066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d108      	bne.n	800509a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d118      	bne.n	80050e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d00d      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e003      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	200045d8 	.word	0x200045d8
 8005108:	200045e0 	.word	0x200045e0

0800510c <__errno>:
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <__errno+0x8>)
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000048 	.word	0x20000048

08005118 <__libc_init_array>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4d0d      	ldr	r5, [pc, #52]	; (8005150 <__libc_init_array+0x38>)
 800511c:	4c0d      	ldr	r4, [pc, #52]	; (8005154 <__libc_init_array+0x3c>)
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	2600      	movs	r6, #0
 8005124:	42a6      	cmp	r6, r4
 8005126:	d109      	bne.n	800513c <__libc_init_array+0x24>
 8005128:	4d0b      	ldr	r5, [pc, #44]	; (8005158 <__libc_init_array+0x40>)
 800512a:	4c0c      	ldr	r4, [pc, #48]	; (800515c <__libc_init_array+0x44>)
 800512c:	f000 fcf8 	bl	8005b20 <_init>
 8005130:	1b64      	subs	r4, r4, r5
 8005132:	10a4      	asrs	r4, r4, #2
 8005134:	2600      	movs	r6, #0
 8005136:	42a6      	cmp	r6, r4
 8005138:	d105      	bne.n	8005146 <__libc_init_array+0x2e>
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005140:	4798      	blx	r3
 8005142:	3601      	adds	r6, #1
 8005144:	e7ee      	b.n	8005124 <__libc_init_array+0xc>
 8005146:	f855 3b04 	ldr.w	r3, [r5], #4
 800514a:	4798      	blx	r3
 800514c:	3601      	adds	r6, #1
 800514e:	e7f2      	b.n	8005136 <__libc_init_array+0x1e>
 8005150:	08005d2c 	.word	0x08005d2c
 8005154:	08005d2c 	.word	0x08005d2c
 8005158:	08005d2c 	.word	0x08005d2c
 800515c:	08005d30 	.word	0x08005d30

08005160 <__retarget_lock_acquire_recursive>:
 8005160:	4770      	bx	lr

08005162 <__retarget_lock_release_recursive>:
 8005162:	4770      	bx	lr

08005164 <memcpy>:
 8005164:	440a      	add	r2, r1
 8005166:	4291      	cmp	r1, r2
 8005168:	f100 33ff 	add.w	r3, r0, #4294967295
 800516c:	d100      	bne.n	8005170 <memcpy+0xc>
 800516e:	4770      	bx	lr
 8005170:	b510      	push	{r4, lr}
 8005172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800517a:	4291      	cmp	r1, r2
 800517c:	d1f9      	bne.n	8005172 <memcpy+0xe>
 800517e:	bd10      	pop	{r4, pc}

08005180 <memset>:
 8005180:	4402      	add	r2, r0
 8005182:	4603      	mov	r3, r0
 8005184:	4293      	cmp	r3, r2
 8005186:	d100      	bne.n	800518a <memset+0xa>
 8005188:	4770      	bx	lr
 800518a:	f803 1b01 	strb.w	r1, [r3], #1
 800518e:	e7f9      	b.n	8005184 <memset+0x4>

08005190 <sbrk_aligned>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4e0e      	ldr	r6, [pc, #56]	; (80051cc <sbrk_aligned+0x3c>)
 8005194:	460c      	mov	r4, r1
 8005196:	6831      	ldr	r1, [r6, #0]
 8005198:	4605      	mov	r5, r0
 800519a:	b911      	cbnz	r1, 80051a2 <sbrk_aligned+0x12>
 800519c:	f000 f8f6 	bl	800538c <_sbrk_r>
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f8f1 	bl	800538c <_sbrk_r>
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d00a      	beq.n	80051c4 <sbrk_aligned+0x34>
 80051ae:	1cc4      	adds	r4, r0, #3
 80051b0:	f024 0403 	bic.w	r4, r4, #3
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d007      	beq.n	80051c8 <sbrk_aligned+0x38>
 80051b8:	1a21      	subs	r1, r4, r0
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 f8e6 	bl	800538c <_sbrk_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d101      	bne.n	80051c8 <sbrk_aligned+0x38>
 80051c4:	f04f 34ff 	mov.w	r4, #4294967295
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	20004600 	.word	0x20004600

080051d0 <_malloc_r>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	1ccd      	adds	r5, r1, #3
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	2d00      	cmp	r5, #0
 80051e4:	4607      	mov	r7, r0
 80051e6:	db01      	blt.n	80051ec <_malloc_r+0x1c>
 80051e8:	42a9      	cmp	r1, r5
 80051ea:	d905      	bls.n	80051f8 <_malloc_r+0x28>
 80051ec:	230c      	movs	r3, #12
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	2600      	movs	r6, #0
 80051f2:	4630      	mov	r0, r6
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f8:	4e2e      	ldr	r6, [pc, #184]	; (80052b4 <_malloc_r+0xe4>)
 80051fa:	f000 f8f7 	bl	80053ec <__malloc_lock>
 80051fe:	6833      	ldr	r3, [r6, #0]
 8005200:	461c      	mov	r4, r3
 8005202:	bb34      	cbnz	r4, 8005252 <_malloc_r+0x82>
 8005204:	4629      	mov	r1, r5
 8005206:	4638      	mov	r0, r7
 8005208:	f7ff ffc2 	bl	8005190 <sbrk_aligned>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	4604      	mov	r4, r0
 8005210:	d14d      	bne.n	80052ae <_malloc_r+0xde>
 8005212:	6834      	ldr	r4, [r6, #0]
 8005214:	4626      	mov	r6, r4
 8005216:	2e00      	cmp	r6, #0
 8005218:	d140      	bne.n	800529c <_malloc_r+0xcc>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	4631      	mov	r1, r6
 800521e:	4638      	mov	r0, r7
 8005220:	eb04 0803 	add.w	r8, r4, r3
 8005224:	f000 f8b2 	bl	800538c <_sbrk_r>
 8005228:	4580      	cmp	r8, r0
 800522a:	d13a      	bne.n	80052a2 <_malloc_r+0xd2>
 800522c:	6821      	ldr	r1, [r4, #0]
 800522e:	3503      	adds	r5, #3
 8005230:	1a6d      	subs	r5, r5, r1
 8005232:	f025 0503 	bic.w	r5, r5, #3
 8005236:	3508      	adds	r5, #8
 8005238:	2d0c      	cmp	r5, #12
 800523a:	bf38      	it	cc
 800523c:	250c      	movcc	r5, #12
 800523e:	4629      	mov	r1, r5
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ffa5 	bl	8005190 <sbrk_aligned>
 8005246:	3001      	adds	r0, #1
 8005248:	d02b      	beq.n	80052a2 <_malloc_r+0xd2>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	442b      	add	r3, r5
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	e00e      	b.n	8005270 <_malloc_r+0xa0>
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	1b52      	subs	r2, r2, r5
 8005256:	d41e      	bmi.n	8005296 <_malloc_r+0xc6>
 8005258:	2a0b      	cmp	r2, #11
 800525a:	d916      	bls.n	800528a <_malloc_r+0xba>
 800525c:	1961      	adds	r1, r4, r5
 800525e:	42a3      	cmp	r3, r4
 8005260:	6025      	str	r5, [r4, #0]
 8005262:	bf18      	it	ne
 8005264:	6059      	strne	r1, [r3, #4]
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	bf08      	it	eq
 800526a:	6031      	streq	r1, [r6, #0]
 800526c:	5162      	str	r2, [r4, r5]
 800526e:	604b      	str	r3, [r1, #4]
 8005270:	4638      	mov	r0, r7
 8005272:	f104 060b 	add.w	r6, r4, #11
 8005276:	f000 f8bf 	bl	80053f8 <__malloc_unlock>
 800527a:	f026 0607 	bic.w	r6, r6, #7
 800527e:	1d23      	adds	r3, r4, #4
 8005280:	1af2      	subs	r2, r6, r3
 8005282:	d0b6      	beq.n	80051f2 <_malloc_r+0x22>
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	50a3      	str	r3, [r4, r2]
 8005288:	e7b3      	b.n	80051f2 <_malloc_r+0x22>
 800528a:	6862      	ldr	r2, [r4, #4]
 800528c:	42a3      	cmp	r3, r4
 800528e:	bf0c      	ite	eq
 8005290:	6032      	streq	r2, [r6, #0]
 8005292:	605a      	strne	r2, [r3, #4]
 8005294:	e7ec      	b.n	8005270 <_malloc_r+0xa0>
 8005296:	4623      	mov	r3, r4
 8005298:	6864      	ldr	r4, [r4, #4]
 800529a:	e7b2      	b.n	8005202 <_malloc_r+0x32>
 800529c:	4634      	mov	r4, r6
 800529e:	6876      	ldr	r6, [r6, #4]
 80052a0:	e7b9      	b.n	8005216 <_malloc_r+0x46>
 80052a2:	230c      	movs	r3, #12
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4638      	mov	r0, r7
 80052a8:	f000 f8a6 	bl	80053f8 <__malloc_unlock>
 80052ac:	e7a1      	b.n	80051f2 <_malloc_r+0x22>
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	e7de      	b.n	8005270 <_malloc_r+0xa0>
 80052b2:	bf00      	nop
 80052b4:	200045fc 	.word	0x200045fc

080052b8 <cleanup_glue>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	6809      	ldr	r1, [r1, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	b109      	cbz	r1, 80052c6 <cleanup_glue+0xe>
 80052c2:	f7ff fff9 	bl	80052b8 <cleanup_glue>
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ce:	f000 b899 	b.w	8005404 <_free_r>
	...

080052d4 <_reclaim_reent>:
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <_reclaim_reent+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4283      	cmp	r3, r0
 80052da:	b570      	push	{r4, r5, r6, lr}
 80052dc:	4604      	mov	r4, r0
 80052de:	d051      	beq.n	8005384 <_reclaim_reent+0xb0>
 80052e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052e2:	b143      	cbz	r3, 80052f6 <_reclaim_reent+0x22>
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d14a      	bne.n	8005380 <_reclaim_reent+0xac>
 80052ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	b111      	cbz	r1, 80052f6 <_reclaim_reent+0x22>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 f887 	bl	8005404 <_free_r>
 80052f6:	6961      	ldr	r1, [r4, #20]
 80052f8:	b111      	cbz	r1, 8005300 <_reclaim_reent+0x2c>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f882 	bl	8005404 <_free_r>
 8005300:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005302:	b111      	cbz	r1, 800530a <_reclaim_reent+0x36>
 8005304:	4620      	mov	r0, r4
 8005306:	f000 f87d 	bl	8005404 <_free_r>
 800530a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800530c:	b111      	cbz	r1, 8005314 <_reclaim_reent+0x40>
 800530e:	4620      	mov	r0, r4
 8005310:	f000 f878 	bl	8005404 <_free_r>
 8005314:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005316:	b111      	cbz	r1, 800531e <_reclaim_reent+0x4a>
 8005318:	4620      	mov	r0, r4
 800531a:	f000 f873 	bl	8005404 <_free_r>
 800531e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005320:	b111      	cbz	r1, 8005328 <_reclaim_reent+0x54>
 8005322:	4620      	mov	r0, r4
 8005324:	f000 f86e 	bl	8005404 <_free_r>
 8005328:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800532a:	b111      	cbz	r1, 8005332 <_reclaim_reent+0x5e>
 800532c:	4620      	mov	r0, r4
 800532e:	f000 f869 	bl	8005404 <_free_r>
 8005332:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005334:	b111      	cbz	r1, 800533c <_reclaim_reent+0x68>
 8005336:	4620      	mov	r0, r4
 8005338:	f000 f864 	bl	8005404 <_free_r>
 800533c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800533e:	b111      	cbz	r1, 8005346 <_reclaim_reent+0x72>
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f85f 	bl	8005404 <_free_r>
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	b1e3      	cbz	r3, 8005384 <_reclaim_reent+0xb0>
 800534a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800534c:	4620      	mov	r0, r4
 800534e:	4798      	blx	r3
 8005350:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005352:	b1b9      	cbz	r1, 8005384 <_reclaim_reent+0xb0>
 8005354:	4620      	mov	r0, r4
 8005356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800535a:	f7ff bfad 	b.w	80052b8 <cleanup_glue>
 800535e:	5949      	ldr	r1, [r1, r5]
 8005360:	b941      	cbnz	r1, 8005374 <_reclaim_reent+0xa0>
 8005362:	3504      	adds	r5, #4
 8005364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005366:	2d80      	cmp	r5, #128	; 0x80
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	d1f8      	bne.n	800535e <_reclaim_reent+0x8a>
 800536c:	4620      	mov	r0, r4
 800536e:	f000 f849 	bl	8005404 <_free_r>
 8005372:	e7ba      	b.n	80052ea <_reclaim_reent+0x16>
 8005374:	680e      	ldr	r6, [r1, #0]
 8005376:	4620      	mov	r0, r4
 8005378:	f000 f844 	bl	8005404 <_free_r>
 800537c:	4631      	mov	r1, r6
 800537e:	e7ef      	b.n	8005360 <_reclaim_reent+0x8c>
 8005380:	2500      	movs	r5, #0
 8005382:	e7ef      	b.n	8005364 <_reclaim_reent+0x90>
 8005384:	bd70      	pop	{r4, r5, r6, pc}
 8005386:	bf00      	nop
 8005388:	20000048 	.word	0x20000048

0800538c <_sbrk_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d06      	ldr	r5, [pc, #24]	; (80053a8 <_sbrk_r+0x1c>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	f7fb fd8e 	bl	8000eb8 <_sbrk>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_sbrk_r+0x1a>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_sbrk_r+0x1a>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20004604 	.word	0x20004604

080053ac <siprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b500      	push	{lr}
 80053b0:	b09c      	sub	sp, #112	; 0x70
 80053b2:	ab1d      	add	r3, sp, #116	; 0x74
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053bc:	4809      	ldr	r0, [pc, #36]	; (80053e4 <siprintf+0x38>)
 80053be:	9107      	str	r1, [sp, #28]
 80053c0:	9104      	str	r1, [sp, #16]
 80053c2:	4909      	ldr	r1, [pc, #36]	; (80053e8 <siprintf+0x3c>)
 80053c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	a902      	add	r1, sp, #8
 80053d0:	f000 f8c0 	bl	8005554 <_svfiprintf_r>
 80053d4:	9b02      	ldr	r3, [sp, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	b01c      	add	sp, #112	; 0x70
 80053dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e0:	b003      	add	sp, #12
 80053e2:	4770      	bx	lr
 80053e4:	20000048 	.word	0x20000048
 80053e8:	ffff0208 	.word	0xffff0208

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_lock+0x8>)
 80053ee:	f7ff beb7 	b.w	8005160 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	200045f8 	.word	0x200045f8

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_unlock+0x8>)
 80053fa:	f7ff beb2 	b.w	8005162 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	200045f8 	.word	0x200045f8

08005404 <_free_r>:
 8005404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005406:	2900      	cmp	r1, #0
 8005408:	d044      	beq.n	8005494 <_free_r+0x90>
 800540a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540e:	9001      	str	r0, [sp, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f1a1 0404 	sub.w	r4, r1, #4
 8005416:	bfb8      	it	lt
 8005418:	18e4      	addlt	r4, r4, r3
 800541a:	f7ff ffe7 	bl	80053ec <__malloc_lock>
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <_free_r+0x94>)
 8005420:	9801      	ldr	r0, [sp, #4]
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	b933      	cbnz	r3, 8005434 <_free_r+0x30>
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6014      	str	r4, [r2, #0]
 800542a:	b003      	add	sp, #12
 800542c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005430:	f7ff bfe2 	b.w	80053f8 <__malloc_unlock>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d908      	bls.n	800544a <_free_r+0x46>
 8005438:	6825      	ldr	r5, [r4, #0]
 800543a:	1961      	adds	r1, r4, r5
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1949      	addeq	r1, r1, r5
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	e7ed      	b.n	8005426 <_free_r+0x22>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x50>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x46>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1855      	adds	r5, r2, r1
 8005458:	42a5      	cmp	r5, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x70>
 800545c:	6824      	ldr	r4, [r4, #0]
 800545e:	4421      	add	r1, r4
 8005460:	1854      	adds	r4, r2, r1
 8005462:	42a3      	cmp	r3, r4
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1e0      	bne.n	800542a <_free_r+0x26>
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	4421      	add	r1, r4
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	e7da      	b.n	800542a <_free_r+0x26>
 8005474:	d902      	bls.n	800547c <_free_r+0x78>
 8005476:	230c      	movs	r3, #12
 8005478:	6003      	str	r3, [r0, #0]
 800547a:	e7d6      	b.n	800542a <_free_r+0x26>
 800547c:	6825      	ldr	r5, [r4, #0]
 800547e:	1961      	adds	r1, r4, r5
 8005480:	428b      	cmp	r3, r1
 8005482:	bf04      	itt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	bf04      	itt	eq
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	6054      	str	r4, [r2, #4]
 8005492:	e7ca      	b.n	800542a <_free_r+0x26>
 8005494:	b003      	add	sp, #12
 8005496:	bd30      	pop	{r4, r5, pc}
 8005498:	200045fc 	.word	0x200045fc

0800549c <__ssputs_r>:
 800549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	688e      	ldr	r6, [r1, #8]
 80054a2:	429e      	cmp	r6, r3
 80054a4:	4682      	mov	sl, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	4690      	mov	r8, r2
 80054aa:	461f      	mov	r7, r3
 80054ac:	d838      	bhi.n	8005520 <__ssputs_r+0x84>
 80054ae:	898a      	ldrh	r2, [r1, #12]
 80054b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054b4:	d032      	beq.n	800551c <__ssputs_r+0x80>
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	6909      	ldr	r1, [r1, #16]
 80054ba:	eba5 0901 	sub.w	r9, r5, r1
 80054be:	6965      	ldr	r5, [r4, #20]
 80054c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c8:	3301      	adds	r3, #1
 80054ca:	444b      	add	r3, r9
 80054cc:	106d      	asrs	r5, r5, #1
 80054ce:	429d      	cmp	r5, r3
 80054d0:	bf38      	it	cc
 80054d2:	461d      	movcc	r5, r3
 80054d4:	0553      	lsls	r3, r2, #21
 80054d6:	d531      	bpl.n	800553c <__ssputs_r+0xa0>
 80054d8:	4629      	mov	r1, r5
 80054da:	f7ff fe79 	bl	80051d0 <_malloc_r>
 80054de:	4606      	mov	r6, r0
 80054e0:	b950      	cbnz	r0, 80054f8 <__ssputs_r+0x5c>
 80054e2:	230c      	movs	r3, #12
 80054e4:	f8ca 3000 	str.w	r3, [sl]
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	6921      	ldr	r1, [r4, #16]
 80054fa:	464a      	mov	r2, r9
 80054fc:	f7ff fe32 	bl	8005164 <memcpy>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	6126      	str	r6, [r4, #16]
 800550e:	6165      	str	r5, [r4, #20]
 8005510:	444e      	add	r6, r9
 8005512:	eba5 0509 	sub.w	r5, r5, r9
 8005516:	6026      	str	r6, [r4, #0]
 8005518:	60a5      	str	r5, [r4, #8]
 800551a:	463e      	mov	r6, r7
 800551c:	42be      	cmp	r6, r7
 800551e:	d900      	bls.n	8005522 <__ssputs_r+0x86>
 8005520:	463e      	mov	r6, r7
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	4632      	mov	r2, r6
 8005526:	4641      	mov	r1, r8
 8005528:	f000 faa8 	bl	8005a7c <memmove>
 800552c:	68a3      	ldr	r3, [r4, #8]
 800552e:	1b9b      	subs	r3, r3, r6
 8005530:	60a3      	str	r3, [r4, #8]
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	4433      	add	r3, r6
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	2000      	movs	r0, #0
 800553a:	e7db      	b.n	80054f4 <__ssputs_r+0x58>
 800553c:	462a      	mov	r2, r5
 800553e:	f000 fab7 	bl	8005ab0 <_realloc_r>
 8005542:	4606      	mov	r6, r0
 8005544:	2800      	cmp	r0, #0
 8005546:	d1e1      	bne.n	800550c <__ssputs_r+0x70>
 8005548:	6921      	ldr	r1, [r4, #16]
 800554a:	4650      	mov	r0, sl
 800554c:	f7ff ff5a 	bl	8005404 <_free_r>
 8005550:	e7c7      	b.n	80054e2 <__ssputs_r+0x46>
	...

08005554 <_svfiprintf_r>:
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	4698      	mov	r8, r3
 800555a:	898b      	ldrh	r3, [r1, #12]
 800555c:	061b      	lsls	r3, r3, #24
 800555e:	b09d      	sub	sp, #116	; 0x74
 8005560:	4607      	mov	r7, r0
 8005562:	460d      	mov	r5, r1
 8005564:	4614      	mov	r4, r2
 8005566:	d50e      	bpl.n	8005586 <_svfiprintf_r+0x32>
 8005568:	690b      	ldr	r3, [r1, #16]
 800556a:	b963      	cbnz	r3, 8005586 <_svfiprintf_r+0x32>
 800556c:	2140      	movs	r1, #64	; 0x40
 800556e:	f7ff fe2f 	bl	80051d0 <_malloc_r>
 8005572:	6028      	str	r0, [r5, #0]
 8005574:	6128      	str	r0, [r5, #16]
 8005576:	b920      	cbnz	r0, 8005582 <_svfiprintf_r+0x2e>
 8005578:	230c      	movs	r3, #12
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e0d1      	b.n	8005726 <_svfiprintf_r+0x1d2>
 8005582:	2340      	movs	r3, #64	; 0x40
 8005584:	616b      	str	r3, [r5, #20]
 8005586:	2300      	movs	r3, #0
 8005588:	9309      	str	r3, [sp, #36]	; 0x24
 800558a:	2320      	movs	r3, #32
 800558c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005590:	f8cd 800c 	str.w	r8, [sp, #12]
 8005594:	2330      	movs	r3, #48	; 0x30
 8005596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005740 <_svfiprintf_r+0x1ec>
 800559a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800559e:	f04f 0901 	mov.w	r9, #1
 80055a2:	4623      	mov	r3, r4
 80055a4:	469a      	mov	sl, r3
 80055a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055aa:	b10a      	cbz	r2, 80055b0 <_svfiprintf_r+0x5c>
 80055ac:	2a25      	cmp	r2, #37	; 0x25
 80055ae:	d1f9      	bne.n	80055a4 <_svfiprintf_r+0x50>
 80055b0:	ebba 0b04 	subs.w	fp, sl, r4
 80055b4:	d00b      	beq.n	80055ce <_svfiprintf_r+0x7a>
 80055b6:	465b      	mov	r3, fp
 80055b8:	4622      	mov	r2, r4
 80055ba:	4629      	mov	r1, r5
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ff6d 	bl	800549c <__ssputs_r>
 80055c2:	3001      	adds	r0, #1
 80055c4:	f000 80aa 	beq.w	800571c <_svfiprintf_r+0x1c8>
 80055c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ca:	445a      	add	r2, fp
 80055cc:	9209      	str	r2, [sp, #36]	; 0x24
 80055ce:	f89a 3000 	ldrb.w	r3, [sl]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a2 	beq.w	800571c <_svfiprintf_r+0x1c8>
 80055d8:	2300      	movs	r3, #0
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e2:	f10a 0a01 	add.w	sl, sl, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	9307      	str	r3, [sp, #28]
 80055ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ee:	931a      	str	r3, [sp, #104]	; 0x68
 80055f0:	4654      	mov	r4, sl
 80055f2:	2205      	movs	r2, #5
 80055f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f8:	4851      	ldr	r0, [pc, #324]	; (8005740 <_svfiprintf_r+0x1ec>)
 80055fa:	f7fa fe01 	bl	8000200 <memchr>
 80055fe:	9a04      	ldr	r2, [sp, #16]
 8005600:	b9d8      	cbnz	r0, 800563a <_svfiprintf_r+0xe6>
 8005602:	06d0      	lsls	r0, r2, #27
 8005604:	bf44      	itt	mi
 8005606:	2320      	movmi	r3, #32
 8005608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560c:	0711      	lsls	r1, r2, #28
 800560e:	bf44      	itt	mi
 8005610:	232b      	movmi	r3, #43	; 0x2b
 8005612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005616:	f89a 3000 	ldrb.w	r3, [sl]
 800561a:	2b2a      	cmp	r3, #42	; 0x2a
 800561c:	d015      	beq.n	800564a <_svfiprintf_r+0xf6>
 800561e:	9a07      	ldr	r2, [sp, #28]
 8005620:	4654      	mov	r4, sl
 8005622:	2000      	movs	r0, #0
 8005624:	f04f 0c0a 	mov.w	ip, #10
 8005628:	4621      	mov	r1, r4
 800562a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562e:	3b30      	subs	r3, #48	; 0x30
 8005630:	2b09      	cmp	r3, #9
 8005632:	d94e      	bls.n	80056d2 <_svfiprintf_r+0x17e>
 8005634:	b1b0      	cbz	r0, 8005664 <_svfiprintf_r+0x110>
 8005636:	9207      	str	r2, [sp, #28]
 8005638:	e014      	b.n	8005664 <_svfiprintf_r+0x110>
 800563a:	eba0 0308 	sub.w	r3, r0, r8
 800563e:	fa09 f303 	lsl.w	r3, r9, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	46a2      	mov	sl, r4
 8005648:	e7d2      	b.n	80055f0 <_svfiprintf_r+0x9c>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	1d19      	adds	r1, r3, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	9103      	str	r1, [sp, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	bfbb      	ittet	lt
 8005656:	425b      	neglt	r3, r3
 8005658:	f042 0202 	orrlt.w	r2, r2, #2
 800565c:	9307      	strge	r3, [sp, #28]
 800565e:	9307      	strlt	r3, [sp, #28]
 8005660:	bfb8      	it	lt
 8005662:	9204      	strlt	r2, [sp, #16]
 8005664:	7823      	ldrb	r3, [r4, #0]
 8005666:	2b2e      	cmp	r3, #46	; 0x2e
 8005668:	d10c      	bne.n	8005684 <_svfiprintf_r+0x130>
 800566a:	7863      	ldrb	r3, [r4, #1]
 800566c:	2b2a      	cmp	r3, #42	; 0x2a
 800566e:	d135      	bne.n	80056dc <_svfiprintf_r+0x188>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	9203      	str	r2, [sp, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	bfb8      	it	lt
 800567c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005680:	3402      	adds	r4, #2
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005750 <_svfiprintf_r+0x1fc>
 8005688:	7821      	ldrb	r1, [r4, #0]
 800568a:	2203      	movs	r2, #3
 800568c:	4650      	mov	r0, sl
 800568e:	f7fa fdb7 	bl	8000200 <memchr>
 8005692:	b140      	cbz	r0, 80056a6 <_svfiprintf_r+0x152>
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	eba0 000a 	sub.w	r0, r0, sl
 800569a:	fa03 f000 	lsl.w	r0, r3, r0
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	4303      	orrs	r3, r0
 80056a2:	3401      	adds	r4, #1
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056aa:	4826      	ldr	r0, [pc, #152]	; (8005744 <_svfiprintf_r+0x1f0>)
 80056ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b0:	2206      	movs	r2, #6
 80056b2:	f7fa fda5 	bl	8000200 <memchr>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d038      	beq.n	800572c <_svfiprintf_r+0x1d8>
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <_svfiprintf_r+0x1f4>)
 80056bc:	bb1b      	cbnz	r3, 8005706 <_svfiprintf_r+0x1b2>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	3307      	adds	r3, #7
 80056c2:	f023 0307 	bic.w	r3, r3, #7
 80056c6:	3308      	adds	r3, #8
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056cc:	4433      	add	r3, r6
 80056ce:	9309      	str	r3, [sp, #36]	; 0x24
 80056d0:	e767      	b.n	80055a2 <_svfiprintf_r+0x4e>
 80056d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d6:	460c      	mov	r4, r1
 80056d8:	2001      	movs	r0, #1
 80056da:	e7a5      	b.n	8005628 <_svfiprintf_r+0xd4>
 80056dc:	2300      	movs	r3, #0
 80056de:	3401      	adds	r4, #1
 80056e0:	9305      	str	r3, [sp, #20]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f04f 0c0a 	mov.w	ip, #10
 80056e8:	4620      	mov	r0, r4
 80056ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ee:	3a30      	subs	r2, #48	; 0x30
 80056f0:	2a09      	cmp	r2, #9
 80056f2:	d903      	bls.n	80056fc <_svfiprintf_r+0x1a8>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0c5      	beq.n	8005684 <_svfiprintf_r+0x130>
 80056f8:	9105      	str	r1, [sp, #20]
 80056fa:	e7c3      	b.n	8005684 <_svfiprintf_r+0x130>
 80056fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005700:	4604      	mov	r4, r0
 8005702:	2301      	movs	r3, #1
 8005704:	e7f0      	b.n	80056e8 <_svfiprintf_r+0x194>
 8005706:	ab03      	add	r3, sp, #12
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	462a      	mov	r2, r5
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <_svfiprintf_r+0x1f8>)
 800570e:	a904      	add	r1, sp, #16
 8005710:	4638      	mov	r0, r7
 8005712:	f3af 8000 	nop.w
 8005716:	1c42      	adds	r2, r0, #1
 8005718:	4606      	mov	r6, r0
 800571a:	d1d6      	bne.n	80056ca <_svfiprintf_r+0x176>
 800571c:	89ab      	ldrh	r3, [r5, #12]
 800571e:	065b      	lsls	r3, r3, #25
 8005720:	f53f af2c 	bmi.w	800557c <_svfiprintf_r+0x28>
 8005724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005726:	b01d      	add	sp, #116	; 0x74
 8005728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572c:	ab03      	add	r3, sp, #12
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	462a      	mov	r2, r5
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <_svfiprintf_r+0x1f8>)
 8005734:	a904      	add	r1, sp, #16
 8005736:	4638      	mov	r0, r7
 8005738:	f000 f87a 	bl	8005830 <_printf_i>
 800573c:	e7eb      	b.n	8005716 <_svfiprintf_r+0x1c2>
 800573e:	bf00      	nop
 8005740:	08005cf0 	.word	0x08005cf0
 8005744:	08005cfa 	.word	0x08005cfa
 8005748:	00000000 	.word	0x00000000
 800574c:	0800549d 	.word	0x0800549d
 8005750:	08005cf6 	.word	0x08005cf6

08005754 <_printf_common>:
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	4616      	mov	r6, r2
 800575a:	4699      	mov	r9, r3
 800575c:	688a      	ldr	r2, [r1, #8]
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005764:	4293      	cmp	r3, r2
 8005766:	bfb8      	it	lt
 8005768:	4613      	movlt	r3, r2
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005770:	4607      	mov	r7, r0
 8005772:	460c      	mov	r4, r1
 8005774:	b10a      	cbz	r2, 800577a <_printf_common+0x26>
 8005776:	3301      	adds	r3, #1
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	0699      	lsls	r1, r3, #26
 800577e:	bf42      	ittt	mi
 8005780:	6833      	ldrmi	r3, [r6, #0]
 8005782:	3302      	addmi	r3, #2
 8005784:	6033      	strmi	r3, [r6, #0]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	f015 0506 	ands.w	r5, r5, #6
 800578c:	d106      	bne.n	800579c <_printf_common+0x48>
 800578e:	f104 0a19 	add.w	sl, r4, #25
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	6832      	ldr	r2, [r6, #0]
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	42ab      	cmp	r3, r5
 800579a:	dc26      	bgt.n	80057ea <_printf_common+0x96>
 800579c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a0:	1e13      	subs	r3, r2, #0
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	0692      	lsls	r2, r2, #26
 80057aa:	d42b      	bmi.n	8005804 <_printf_common+0xb0>
 80057ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d01e      	beq.n	80057f8 <_printf_common+0xa4>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	68e5      	ldr	r5, [r4, #12]
 80057be:	6832      	ldr	r2, [r6, #0]
 80057c0:	f003 0306 	and.w	r3, r3, #6
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	bf08      	it	eq
 80057c8:	1aad      	subeq	r5, r5, r2
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	bf0c      	ite	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	2500      	movne	r5, #0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bfc4      	itt	gt
 80057da:	1a9b      	subgt	r3, r3, r2
 80057dc:	18ed      	addgt	r5, r5, r3
 80057de:	2600      	movs	r6, #0
 80057e0:	341a      	adds	r4, #26
 80057e2:	42b5      	cmp	r5, r6
 80057e4:	d11a      	bne.n	800581c <_printf_common+0xc8>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e008      	b.n	80057fc <_printf_common+0xa8>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4652      	mov	r2, sl
 80057ee:	4649      	mov	r1, r9
 80057f0:	4638      	mov	r0, r7
 80057f2:	47c0      	blx	r8
 80057f4:	3001      	adds	r0, #1
 80057f6:	d103      	bne.n	8005800 <_printf_common+0xac>
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	3501      	adds	r5, #1
 8005802:	e7c6      	b.n	8005792 <_printf_common+0x3e>
 8005804:	18e1      	adds	r1, r4, r3
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	2030      	movs	r0, #48	; 0x30
 800580a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580e:	4422      	add	r2, r4
 8005810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005818:	3302      	adds	r3, #2
 800581a:	e7c7      	b.n	80057ac <_printf_common+0x58>
 800581c:	2301      	movs	r3, #1
 800581e:	4622      	mov	r2, r4
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d0e6      	beq.n	80057f8 <_printf_common+0xa4>
 800582a:	3601      	adds	r6, #1
 800582c:	e7d9      	b.n	80057e2 <_printf_common+0x8e>
	...

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	7e0f      	ldrb	r7, [r1, #24]
 8005836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005838:	2f78      	cmp	r7, #120	; 0x78
 800583a:	4691      	mov	r9, r2
 800583c:	4680      	mov	r8, r0
 800583e:	460c      	mov	r4, r1
 8005840:	469a      	mov	sl, r3
 8005842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	; 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d8 	beq.w	8005a02 <_printf_i+0x1d2>
 8005852:	2f58      	cmp	r7, #88	; 0x58
 8005854:	f000 80a3 	beq.w	800599e <_printf_i+0x16e>
 8005858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a101      	add	r1, pc, #4	; (adr r1, 8005870 <_printf_i+0x40>)
 800586c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059e9 	.word	0x080059e9
 80058a0:	0800590d 	.word	0x0800590d
 80058a4:	080059cb 	.word	0x080059cb
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	08005a0b 	.word	0x08005a0b
 80058b4:	08005859 	.word	0x08005859
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	080059d3 	.word	0x080059d3
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	602a      	str	r2, [r5, #0]
 80058d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e0a3      	b.n	8005a24 <_printf_i+0x1f4>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	6829      	ldr	r1, [r5, #0]
 80058e0:	0606      	lsls	r6, r0, #24
 80058e2:	f101 0304 	add.w	r3, r1, #4
 80058e6:	d50a      	bpl.n	80058fe <_printf_i+0xce>
 80058e8:	680e      	ldr	r6, [r1, #0]
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	2e00      	cmp	r6, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xc8>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	4276      	negs	r6, r6
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	485e      	ldr	r0, [pc, #376]	; (8005a74 <_printf_i+0x244>)
 80058fa:	230a      	movs	r3, #10
 80058fc:	e019      	b.n	8005932 <_printf_i+0x102>
 80058fe:	680e      	ldr	r6, [r1, #0]
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005906:	bf18      	it	ne
 8005908:	b236      	sxthne	r6, r6
 800590a:	e7ef      	b.n	80058ec <_printf_i+0xbc>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	6029      	str	r1, [r5, #0]
 8005914:	0601      	lsls	r1, r0, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xec>
 8005918:	681e      	ldr	r6, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0xf2>
 800591c:	0646      	lsls	r6, r0, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xe8>
 8005920:	881e      	ldrh	r6, [r3, #0]
 8005922:	4854      	ldr	r0, [pc, #336]	; (8005a74 <_printf_i+0x244>)
 8005924:	2f6f      	cmp	r7, #111	; 0x6f
 8005926:	bf0c      	ite	eq
 8005928:	2308      	moveq	r3, #8
 800592a:	230a      	movne	r3, #10
 800592c:	2100      	movs	r1, #0
 800592e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005932:	6865      	ldr	r5, [r4, #4]
 8005934:	60a5      	str	r5, [r4, #8]
 8005936:	2d00      	cmp	r5, #0
 8005938:	bfa2      	ittt	ge
 800593a:	6821      	ldrge	r1, [r4, #0]
 800593c:	f021 0104 	bicge.w	r1, r1, #4
 8005940:	6021      	strge	r1, [r4, #0]
 8005942:	b90e      	cbnz	r6, 8005948 <_printf_i+0x118>
 8005944:	2d00      	cmp	r5, #0
 8005946:	d04d      	beq.n	80059e4 <_printf_i+0x1b4>
 8005948:	4615      	mov	r5, r2
 800594a:	fbb6 f1f3 	udiv	r1, r6, r3
 800594e:	fb03 6711 	mls	r7, r3, r1, r6
 8005952:	5dc7      	ldrb	r7, [r0, r7]
 8005954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005958:	4637      	mov	r7, r6
 800595a:	42bb      	cmp	r3, r7
 800595c:	460e      	mov	r6, r1
 800595e:	d9f4      	bls.n	800594a <_printf_i+0x11a>
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10b      	bne.n	800597c <_printf_i+0x14c>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	07de      	lsls	r6, r3, #31
 8005968:	d508      	bpl.n	800597c <_printf_i+0x14c>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4299      	cmp	r1, r3
 8005970:	bfde      	ittt	le
 8005972:	2330      	movle	r3, #48	; 0x30
 8005974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800597c:	1b52      	subs	r2, r2, r5
 800597e:	6122      	str	r2, [r4, #16]
 8005980:	f8cd a000 	str.w	sl, [sp]
 8005984:	464b      	mov	r3, r9
 8005986:	aa03      	add	r2, sp, #12
 8005988:	4621      	mov	r1, r4
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff fee2 	bl	8005754 <_printf_common>
 8005990:	3001      	adds	r0, #1
 8005992:	d14c      	bne.n	8005a2e <_printf_i+0x1fe>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b004      	add	sp, #16
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	4835      	ldr	r0, [pc, #212]	; (8005a74 <_printf_i+0x244>)
 80059a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059a4:	6829      	ldr	r1, [r5, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059ac:	6029      	str	r1, [r5, #0]
 80059ae:	061d      	lsls	r5, r3, #24
 80059b0:	d514      	bpl.n	80059dc <_printf_i+0x1ac>
 80059b2:	07df      	lsls	r7, r3, #31
 80059b4:	bf44      	itt	mi
 80059b6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ba:	6023      	strmi	r3, [r4, #0]
 80059bc:	b91e      	cbnz	r6, 80059c6 <_printf_i+0x196>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f023 0320 	bic.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	2310      	movs	r3, #16
 80059c8:	e7b0      	b.n	800592c <_printf_i+0xfc>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	2378      	movs	r3, #120	; 0x78
 80059d4:	4828      	ldr	r0, [pc, #160]	; (8005a78 <_printf_i+0x248>)
 80059d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059da:	e7e3      	b.n	80059a4 <_printf_i+0x174>
 80059dc:	0659      	lsls	r1, r3, #25
 80059de:	bf48      	it	mi
 80059e0:	b2b6      	uxthmi	r6, r6
 80059e2:	e7e6      	b.n	80059b2 <_printf_i+0x182>
 80059e4:	4615      	mov	r5, r2
 80059e6:	e7bb      	b.n	8005960 <_printf_i+0x130>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6826      	ldr	r6, [r4, #0]
 80059ec:	6961      	ldr	r1, [r4, #20]
 80059ee:	1d18      	adds	r0, r3, #4
 80059f0:	6028      	str	r0, [r5, #0]
 80059f2:	0635      	lsls	r5, r6, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1cc>
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1d2>
 80059fc:	0670      	lsls	r0, r6, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1c8>
 8005a00:	8019      	strh	r1, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4615      	mov	r5, r2
 8005a08:	e7ba      	b.n	8005980 <_printf_i+0x150>
 8005a0a:	682b      	ldr	r3, [r5, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f7fa fbf2 	bl	8000200 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1f2>
 8005a1e:	1b40      	subs	r0, r0, r5
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e7a8      	b.n	8005980 <_printf_i+0x150>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ab      	beq.n	8005994 <_printf_i+0x164>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x23a>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a4      	b.n	8005998 <_printf_i+0x168>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09b      	beq.n	8005994 <_printf_i+0x164>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x21e>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x212>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x22e>
 8005a72:	bf00      	nop
 8005a74:	08005d01 	.word	0x08005d01
 8005a78:	08005d12 	.word	0x08005d12

08005a7c <memmove>:
 8005a7c:	4288      	cmp	r0, r1
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	eb01 0402 	add.w	r4, r1, r2
 8005a84:	d902      	bls.n	8005a8c <memmove+0x10>
 8005a86:	4284      	cmp	r4, r0
 8005a88:	4623      	mov	r3, r4
 8005a8a:	d807      	bhi.n	8005a9c <memmove+0x20>
 8005a8c:	1e43      	subs	r3, r0, #1
 8005a8e:	42a1      	cmp	r1, r4
 8005a90:	d008      	beq.n	8005aa4 <memmove+0x28>
 8005a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a9a:	e7f8      	b.n	8005a8e <memmove+0x12>
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	428a      	cmp	r2, r1
 8005aa2:	d100      	bne.n	8005aa6 <memmove+0x2a>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aae:	e7f7      	b.n	8005aa0 <memmove+0x24>

08005ab0 <_realloc_r>:
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	4614      	mov	r4, r2
 8005ab8:	460e      	mov	r6, r1
 8005aba:	b921      	cbnz	r1, 8005ac6 <_realloc_r+0x16>
 8005abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	f7ff bb85 	b.w	80051d0 <_malloc_r>
 8005ac6:	b92a      	cbnz	r2, 8005ad4 <_realloc_r+0x24>
 8005ac8:	f7ff fc9c 	bl	8005404 <_free_r>
 8005acc:	4625      	mov	r5, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad4:	f000 f81b 	bl	8005b0e <_malloc_usable_size_r>
 8005ad8:	4284      	cmp	r4, r0
 8005ada:	4607      	mov	r7, r0
 8005adc:	d802      	bhi.n	8005ae4 <_realloc_r+0x34>
 8005ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ae2:	d812      	bhi.n	8005b0a <_realloc_r+0x5a>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f7ff fb72 	bl	80051d0 <_malloc_r>
 8005aec:	4605      	mov	r5, r0
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0ed      	beq.n	8005ace <_realloc_r+0x1e>
 8005af2:	42bc      	cmp	r4, r7
 8005af4:	4622      	mov	r2, r4
 8005af6:	4631      	mov	r1, r6
 8005af8:	bf28      	it	cs
 8005afa:	463a      	movcs	r2, r7
 8005afc:	f7ff fb32 	bl	8005164 <memcpy>
 8005b00:	4631      	mov	r1, r6
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7ff fc7e 	bl	8005404 <_free_r>
 8005b08:	e7e1      	b.n	8005ace <_realloc_r+0x1e>
 8005b0a:	4635      	mov	r5, r6
 8005b0c:	e7df      	b.n	8005ace <_realloc_r+0x1e>

08005b0e <_malloc_usable_size_r>:
 8005b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b12:	1f18      	subs	r0, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bfbc      	itt	lt
 8005b18:	580b      	ldrlt	r3, [r1, r0]
 8005b1a:	18c0      	addlt	r0, r0, r3
 8005b1c:	4770      	bx	lr
	...

08005b20 <_init>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr

08005b2c <_fini>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr
