
PO2_freertos_book_Example2_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          0000455c  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004618  20004618  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a3c  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000348c  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004461  00000000  00000000  0003f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017db8  00000000  00000000  00043de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebce7  00000000  00000000  0005bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147880  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000608c  00000000  00000000  001478d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080058d0 	.word	0x080058d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	080058d0 	.word	0x080058d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b090      	sub	sp, #64	; 0x40
 80005a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	const char *pcTextForMain =
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <main+0x90>)
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ae:	f000 fd75 	bl	800109c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b2:	f000 f853 	bl	800065c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b6:	f000 f961 	bl	800087c <MX_GPIO_Init>
	MX_ETH_Init();
 80005ba:	f000 f8b9 	bl	8000730 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80005be:	f000 f905 	bl	80007cc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005c2:	f000 f92d 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString(pcTextForMain);
 80005c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005c8:	f000 fc2c 	bl	8000e24 <vPrintString>

#if( TASKS_SCOPE == TASKS_OUTSIDE_MAIN2)

	/* Create the thread(s) */
	/* definition and creation of Task1 */
	osThreadDef(Task1, vTaskFunction, osPriorityNormal, 0, 128);
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <main+0x94>)
 80005ce:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	682b      	ldr	r3, [r5, #0]
 80005da:	6023      	str	r3, [r4, #0]
	Task1Handle = osThreadCreate(osThread(Task1), (void*) &ledSTM01);
 80005dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e0:	4916      	ldr	r1, [pc, #88]	; (800063c <main+0x98>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fb2d 	bl	8003c42 <osThreadCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <main+0x9c>)
 80005ec:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, vTaskFunction, osPriorityNormal, 0, 128);
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0xa0>)
 80005f0:	f107 0414 	add.w	r4, r7, #20
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	6023      	str	r3, [r4, #0]
	Task2Handle = osThreadCreate(osThread(Task2), (void*) &ledSTM02);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4911      	ldr	r1, [pc, #68]	; (8000648 <main+0xa4>)
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fb1c 	bl	8003c42 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0xa8>)
 800060e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task3 */
	osThreadDef(Task3, vTaskFunction, osPriorityNormal, 0, 128);
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0xac>)
 8000612:	463c      	mov	r4, r7
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	682b      	ldr	r3, [r5, #0]
 800061c:	6023      	str	r3, [r4, #0]
	Task3Handle = osThreadCreate(osThread(Task3), (void*) &ledSTM03);
 800061e:	463b      	mov	r3, r7
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <main+0xb0>)
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fb0d 	bl	8003c42 <osThreadCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0xb4>)
 800062c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
#endif
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800062e:	f003 faf1 	bl	8003c14 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000632:	e7fe      	b.n	8000632 <main+0x8e>
 8000634:	08005900 	.word	0x08005900
 8000638:	08005934 	.word	0x08005934
 800063c:	20000000 	.word	0x20000000
 8000640:	20000850 	.word	0x20000850
 8000644:	08005948 	.word	0x08005948
 8000648:	2000000c 	.word	0x2000000c
 800064c:	20000854 	.word	0x20000854
 8000650:	0800595c 	.word	0x0800595c
 8000654:	20000018 	.word	0x20000018
 8000658:	20000858 	.word	0x20000858

0800065c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fc60 	bl	8004f30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fc31 	bl	8001f48 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
		Error_Handler();
 80006ec:	f000 f986 	bl	80009fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fe92 	bl	8002438 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
		Error_Handler();
 800071a:	f000 f96f 	bl	80009fc <Error_Handler>
	}
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ETH_Init+0x84>)
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <MX_ETH_Init+0x88>)
 8000738:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ETH_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ETH_Init+0x8c>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ETH_Init+0x8c>)
 8000748:	22e1      	movs	r2, #225	; 0xe1
 800074a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ETH_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ETH_Init+0x84>)
 8000760:	4a16      	ldr	r2, [pc, #88]	; (80007bc <MX_ETH_Init+0x8c>)
 8000762:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_ETH_Init+0x84>)
 8000766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800076a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ETH_Init+0x84>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MX_ETH_Init+0x90>)
 8000770:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_ETH_Init+0x84>)
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_ETH_Init+0x94>)
 8000776:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_ETH_Init+0x84>)
 800077a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800077e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_ETH_Init+0x84>)
 8000782:	f000 fdd3 	bl	800132c <HAL_ETH_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ETH_Init+0x60>
		Error_Handler();
 800078c:	f000 f936 	bl	80009fc <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000790:	2238      	movs	r2, #56	; 0x38
 8000792:	2100      	movs	r1, #0
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x98>)
 8000796:	f004 fbcb 	bl	8004f30 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_ETH_Init+0x98>)
 800079c:	2221      	movs	r2, #33	; 0x21
 800079e:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ETH_Init+0x98>)
 80007a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007a6:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_ETH_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000250 	.word	0x20000250
 80007b8:	40028000 	.word	0x40028000
 80007bc:	2000085c 	.word	0x2000085c
 80007c0:	200001b0 	.word	0x200001b0
 80007c4:	20000110 	.word	0x20000110
 80007c8:	200000d8 	.word	0x200000d8

080007cc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART3_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 8000804:	f002 fb18 	bl	8002e38 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800080e:	f000 f8f5 	bl	80009fc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000300 	.word	0x20000300
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2204      	movs	r2, #4
 8000830:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f001 fa53 	bl	8001d0e <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800086e:	f000 f8c5 	bl	80009fc <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000344 	.word	0x20000344

0800087c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x150>)
 8000942:	f001 f9cb 	bl	8001cdc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x154>)
 800094c:	f001 f9c6 	bl	8001cdc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x158>)
 8000968:	f000 fff4 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x150>)
 8000986:	f000 ffe5 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009a2:	f000 ffd7 	bl	8001954 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009ba:	f000 ffcb 	bl	8001954 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800

080009d8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009ea:	f000 fb79 	bl	80010e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40001400 	.word	0x40001400

080009fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 fc43 	bl	80012d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a55      	ldr	r2, [pc, #340]	; (8000bd4 <HAL_ETH_MspInit+0x174>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	f040 80a4 	bne.w	8000bcc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a4b      	ldr	r2, [pc, #300]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a3d      	ldr	r2, [pc, #244]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b48:	2332      	movs	r3, #50	; 0x32
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <HAL_ETH_MspInit+0x17c>)
 8000b64:	f000 fef6 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b68:	2386      	movs	r3, #134	; 0x86
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_ETH_MspInit+0x180>)
 8000b84:	f000 fee6 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <HAL_ETH_MspInit+0x184>)
 8000ba6:	f000 fed5 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000baa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000bc8:	f000 fec4 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	; 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40028000 	.word	0x40028000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40021800 	.word	0x40021800

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_UART_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12c      	bne.n	8000c68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x8c>)
 8000c64:	f000 fe76 	bl	8001954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40004800 	.word	0x40004800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c9c:	d13f      	bne.n	8000d1e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ccc:	230a      	movs	r3, #10
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4815      	ldr	r0, [pc, #84]	; (8000d2c <HAL_PCD_MspInit+0xb0>)
 8000cd8:	f000 fe3c 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480e      	ldr	r0, [pc, #56]	; (8000d2c <HAL_PCD_MspInit+0xb0>)
 8000cf2:	f000 fe2f 	bl	8001954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6353      	str	r3, [r2, #52]	; 0x34
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_PCD_MspInit+0xac>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2037      	movs	r0, #55	; 0x37
 8000d46:	f000 fac7 	bl	80012d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d4a:	2037      	movs	r0, #55	; 0x37
 8000d4c:	f000 fae0 	bl	8001310 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fd7e 	bl	8002878 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d7c:	f001 fd54 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8000d80:	4603      	mov	r3, r0
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_InitTick+0xa8>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_InitTick+0xac>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_InitTick+0xb0>)
 8000d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_InitTick+0xac>)
 8000d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_InitTick+0xac>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_InitTick+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_InitTick+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_InitTick+0xac>)
 8000db6:	f001 fd91 	bl	80028dc <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <HAL_InitTick+0xac>)
 8000dc2:	f001 fde5 	bl	8002990 <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	20000864 	.word	0x20000864
 8000de0:	40001400 	.word	0x40001400

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM7_IRQHandler+0x10>)
 8000e16:	f001 fe2b 	bl	8002a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000864 	.word	0x20000864

08000e24 <vPrintString>:
extern UART_HandleTypeDef huart3;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000e2c:	f003 fd3a 	bl	80048a4 <vPortEnterCritical>
	{
		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), HAL_MAX_DELAY );
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff f9dd 	bl	80001f0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <vPrintString+0x30>)
 8000e42:	f002 f846 	bl	8002ed2 <HAL_UART_Transmit>
	}
	taskEXIT_CRITICAL();
 8000e46:	f003 fd5d 	bl	8004904 <vPortExitCritical>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000300 	.word	0x20000300

08000e58 <vPrintTwoStrings>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b092      	sub	sp, #72	; 0x48
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	char buffer [50];

	vTaskSuspendAll();
 8000e62:	f003 f929 	bl	80040b8 <vTaskSuspendAll>
	{
		sprintf( buffer, "At time %lu : %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 8000e66:	f003 f9d1 	bl	800420c <xTaskGetTickCount>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f107 000c 	add.w	r0, r7, #12
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <vPrintTwoStrings+0x4c>)
 8000e78:	f004 f970 	bl	800515c <siprintf>
		HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), HAL_MAX_DELAY );
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9b5 	bl	80001f0 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	f107 010c 	add.w	r1, r7, #12
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <vPrintTwoStrings+0x50>)
 8000e94:	f002 f81d 	bl	8002ed2 <HAL_UART_Transmit>
	}
	xTaskResumeAll();
 8000e98:	f003 f91c 	bl	80040d4 <xTaskResumeAll>
}
 8000e9c:	bf00      	nop
 8000e9e:	3740      	adds	r7, #64	; 0x40
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0800598c 	.word	0x0800598c
 8000ea8:	20000300 	.word	0x20000300

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f003 ffee 	bl	8004ebc <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20030000 	.word	0x20030000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200008ac 	.word	0x200008ac
 8000f14:	20004618 	.word	0x20004618

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <vTaskFunction>:

// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task Function thread */
void vTaskFunction(void const *argument) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	/*  Convert argument to struct stmLeds with initialized variables (led, port pin, etc) */
	stmLeds *structLED = (stmLeds*) argument;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	613b      	str	r3, [r7, #16]

	ledFlag_t ledFlag = NotBlinking;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	77fb      	strb	r3, [r7, #31]
	GPIO_PinState ledState = GPIO_PIN_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77bb      	strb	r3, [r7, #30]
	uint32_t ledTickCnt = osKernelSysTick();
 8000f50:	f002 fe67 	bl	8003c22 <osKernelSysTick>
 8000f54:	61b8      	str	r0, [r7, #24]

	uint32_t buttonTickCnt = osKernelSysTick();
 8000f56:	f002 fe64 	bl	8003c22 <osKernelSysTick>
 8000f5a:	6178      	str	r0, [r7, #20]

	char *pcTaskName = (char*) pcTaskGetName( NULL);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f003 f977 	bl	8004250 <pcTaskGetName>
 8000f62:	60f8      	str	r0, [r7, #12]

	/* Print out the name of this task. */
	vPrintTwoStrings(pcTaskName, pcTextForTask_IsRunning);
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <vTaskFunction+0xf4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff ff74 	bl	8000e58 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;) {
		/* Check HW Button State */
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	482f      	ldr	r0, [pc, #188]	; (8001034 <vTaskFunction+0xf8>)
 8000f76:	f000 fe99 	bl	8001cac <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d121      	bne.n	8000fc4 <vTaskFunction+0x88>
				== GPIO_PIN_SET) {
			/* Delay for a period using Tick Count */
			if ((osKernelSysTick() - buttonTickCnt) >= buttonTickCntMAX) {
 8000f80:	f002 fe4f 	bl	8003c22 <osKernelSysTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8e:	d319      	bcc.n	8000fc4 <vTaskFunction+0x88>
				/* Check, Update and Print Led Flag */
				if (ledFlag == NotBlinking) {
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <vTaskFunction+0x6c>
					ledFlag = Blinking;
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]
					vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOn);
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <vTaskFunction+0xfc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff ff59 	bl	8000e58 <vPrintTwoStrings>
 8000fa6:	e007      	b.n	8000fb8 <vTaskFunction+0x7c>
				} else {
					ledFlag = NotBlinking;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	77fb      	strb	r3, [r7, #31]
					vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOff);
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <vTaskFunction+0x100>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff ff50 	bl	8000e58 <vPrintTwoStrings>
				}

		    	structLED->statusBlink=ledFlag;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	7ffa      	ldrb	r2, [r7, #31]
 8000fbc:	721a      	strb	r2, [r3, #8]

				/* Update and Button Tick Counter */
				buttonTickCnt = osKernelSysTick();
 8000fbe:	f002 fe30 	bl	8003c22 <osKernelSysTick>
 8000fc2:	6178      	str	r0, [r7, #20]
			}
		}

		/* Check Led Flag */
		if (ledFlag == Blinking) {
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1d2      	bne.n	8000f70 <vTaskFunction+0x34>
			/* Delay for a period using Tick Count. */
			if ((osKernelSysTick() - ledTickCnt) >= ledTickCntMAX) {
 8000fca:	f002 fe2a 	bl	8003c22 <osKernelSysTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd8:	d3ca      	bcc.n	8000f70 <vTaskFunction+0x34>
				/* Check, Update and Print Led State */
				if (ledState == GPIO_PIN_RESET) {
 8000fda:	7fbb      	ldrb	r3, [r7, #30]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <vTaskFunction+0xbe>
					ledState = GPIO_PIN_SET;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	77bb      	strb	r3, [r7, #30]
					vPrintTwoStrings(pcTaskName,
							pcTextForTask_LDXTOn[structLED->indexLed]);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
					vPrintTwoStrings(pcTaskName,
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <vTaskFunction+0x104>)
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff ff30 	bl	8000e58 <vPrintTwoStrings>
 8000ff8:	e00b      	b.n	8001012 <vTaskFunction+0xd6>
				} else {
					ledState = GPIO_PIN_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	77bb      	strb	r3, [r7, #30]
					vPrintTwoStrings(pcTaskName,
							pcTextForTask_LDXTOff[structLED->indexLed]);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
					vPrintTwoStrings(pcTaskName,
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <vTaskFunction+0x108>)
 8001006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100a:	4619      	mov	r1, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff ff23 	bl	8000e58 <vPrintTwoStrings>
				}

		    	structLED->stateLed=ledState;
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	7fba      	ldrb	r2, [r7, #30]
 8001016:	725a      	strb	r2, [r3, #9]

				/* Update HW Led State */
				HAL_GPIO_WritePin(structLED->LDX_GPIO_Port, structLED->LDX_Pin,
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6858      	ldr	r0, [r3, #4]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	7fba      	ldrb	r2, [r7, #30]
 8001022:	4619      	mov	r1, r3
 8001024:	f000 fe5a 	bl	8001cdc <HAL_GPIO_WritePin>
						ledState);

				/* Update and Led Tick Counter */
				ledTickCnt = osKernelSysTick();
 8001028:	f002 fdfb 	bl	8003c22 <osKernelSysTick>
 800102c:	61b8      	str	r0, [r7, #24]
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)
 800102e:	e79f      	b.n	8000f70 <vTaskFunction+0x34>
 8001030:	20000028 	.word	0x20000028
 8001034:	40020800 	.word	0x40020800
 8001038:	20000044 	.word	0x20000044
 800103c:	20000048 	.word	0x20000048
 8001040:	2000002c 	.word	0x2000002c
 8001044:	20000038 	.word	0x20000038

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff ff51 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 ff27 	bl	8004ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fa93 	bl	80005a4 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001080:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 800108c:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8001090:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001094:	20004618 	.word	0x20004618

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f8fc 	bl	80012c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fe30 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fc9a 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000050 	.word	0x20000050
 8001104:	200008b0 	.word	0x200008b0

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200008b0 	.word	0x200008b0

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000050 	.word	0x20000050

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff4c 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ea:	f7ff ff61 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff ffb1 	bl	800125c <NVIC_EncodePriority>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff80 	bl	8001208 <__NVIC_SetPriority>
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff54 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06c      	b.n	8001418 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2223      	movs	r2, #35	; 0x23
 800134c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fb85 	bl	8000a60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_ETH_Init+0xf4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_ETH_Init+0xf4>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_ETH_Init+0xf4>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800137c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4927      	ldr	r1, [pc, #156]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_ETH_Init+0xf8>)
 800138e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff feae 	bl	8001108 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ae:	e011      	b.n	80013d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013b0:	f7ff feaa 	bl	8001108 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013be:	d909      	bls.n	80013d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	22e0      	movs	r2, #224	; 0xe0
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e021      	b.n	8001418 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1e4      	bne.n	80013b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f944 	bl	8001674 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f9eb 	bl	80017c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa41 	bl	800187a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f9a9 	bl	8001758 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2210      	movs	r2, #16
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800

08001428 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4b47      	ldr	r3, [pc, #284]	; (800155c <ETH_SetMACConfig+0x134>)
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7c1b      	ldrb	r3, [r3, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <ETH_SetMACConfig+0x28>
 800144a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800144e:	e000      	b.n	8001452 <ETH_SetMACConfig+0x2a>
 8001450:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	7c5b      	ldrb	r3, [r3, #17]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <ETH_SetMACConfig+0x38>
 800145a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145e:	e000      	b.n	8001462 <ETH_SetMACConfig+0x3a>
 8001460:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001462:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7fdb      	ldrb	r3, [r3, #31]
 800146e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001470:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	7f92      	ldrb	r2, [r2, #30]
 800147c:	2a00      	cmp	r2, #0
 800147e:	d102      	bne.n	8001486 <ETH_SetMACConfig+0x5e>
 8001480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001484:	e000      	b.n	8001488 <ETH_SetMACConfig+0x60>
 8001486:	2200      	movs	r2, #0
                        macconf->Speed |
 8001488:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7f1b      	ldrb	r3, [r3, #28]
 800148e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001490:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001496:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800149e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d102      	bne.n	80014b0 <ETH_SetMACConfig+0x88>
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	e000      	b.n	80014b2 <ETH_SetMACConfig+0x8a>
 80014b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	7bdb      	ldrb	r3, [r3, #15]
 80014b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ca:	4313      	orrs	r3, r2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fe1c 	bl	8001120 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800150e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001514:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800151c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001524:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800152c:	4313      	orrs	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fdeb 	bl	8001120 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	ff20810f 	.word	0xff20810f

08001560 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ETH_SetDMAConfig+0x110>)
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <ETH_SetDMAConfig+0x2c>
 8001586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800158a:	e000      	b.n	800158e <ETH_SetDMAConfig+0x2e>
 800158c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7b5b      	ldrb	r3, [r3, #13]
 8001592:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001594:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	7f52      	ldrb	r2, [r2, #29]
 800159a:	2a00      	cmp	r2, #0
 800159c:	d102      	bne.n	80015a4 <ETH_SetDMAConfig+0x44>
 800159e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015a2:	e000      	b.n	80015a6 <ETH_SetDMAConfig+0x46>
 80015a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	7b9b      	ldrb	r3, [r3, #14]
 80015ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7f1b      	ldrb	r3, [r3, #28]
 80015ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7f9b      	ldrb	r3, [r3, #30]
 80015c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fd92 	bl	8001120 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001614:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800161a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001620:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001628:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800162a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001632:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001638:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001646:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fd63 	bl	8001120 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	f8de3f23 	.word	0xf8de3f23

08001674 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a6      	sub	sp, #152	; 0x98
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016b0:	2300      	movs	r3, #0
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe9a 	bl	8001428 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001702:	2301      	movs	r3, #1
 8001704:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001720:	2301      	movs	r3, #1
 8001722:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800172a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800172e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff08 	bl	8001560 <ETH_SetDMAConfig>
}
 8001750:	bf00      	nop
 8001752:	3798      	adds	r7, #152	; 0x98
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3305      	adds	r3, #5
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	3204      	adds	r2, #4
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <ETH_MACAddressConfig+0x68>)
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	061a      	lsls	r2, r3, #24
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3302      	adds	r3, #2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	4313      	orrs	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <ETH_MACAddressConfig+0x6c>)
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40028040 	.word	0x40028040
 80017c4:	40028044 	.word	0x40028044

080017c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e03e      	b.n	8001854 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68d9      	ldr	r1, [r3, #12]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	3206      	adds	r2, #6
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d80c      	bhi.n	8001838 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e004      	b.n	8001842 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	461a      	mov	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d9bd      	bls.n	80017d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	611a      	str	r2, [r3, #16]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e046      	b.n	8001916 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6919      	ldr	r1, [r3, #16]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80018cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	3212      	adds	r2, #18
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d80c      	bhi.n	8001906 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e004      	b.n	8001910 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d9b5      	bls.n	8001888 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e177      	b.n	8001c60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8166 	bne.w	8001c5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80c0 	beq.w	8001c5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_GPIO_Init+0x324>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a61      	ldr	r2, [pc, #388]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_GPIO_Init+0x32c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d037      	beq.n	8001b92 <HAL_GPIO_Init+0x23e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_GPIO_Init+0x330>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0x23a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_GPIO_Init+0x334>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x236>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a55      	ldr	r2, [pc, #340]	; (8001c8c <HAL_GPIO_Init+0x338>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x232>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a54      	ldr	r2, [pc, #336]	; (8001c90 <HAL_GPIO_Init+0x33c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x22e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a53      	ldr	r2, [pc, #332]	; (8001c94 <HAL_GPIO_Init+0x340>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x22a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	; (8001c98 <HAL_GPIO_Init+0x344>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a51      	ldr	r2, [pc, #324]	; (8001c9c <HAL_GPIO_Init+0x348>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	; (8001ca0 <HAL_GPIO_Init+0x34c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4f      	ldr	r2, [pc, #316]	; (8001ca4 <HAL_GPIO_Init+0x350>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	e012      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e010      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00e      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e00c      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e00a      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x240>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_GPIO_Init+0x328>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_GPIO_Init+0x354>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f ae84 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40021c00 	.word	0x40021c00
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40022400 	.word	0x40022400
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d10:	b08f      	sub	sp, #60	; 0x3c
 8001d12:	af0a      	add	r7, sp, #40	; 0x28
 8001d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e10f      	b.n	8001f40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe ff9e 	bl	8000c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fc8d 	bl	800367e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	687e      	ldr	r6, [r7, #4]
 8001d6c:	466d      	mov	r5, sp
 8001d6e:	f106 0410 	add.w	r4, r6, #16
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d82:	1d33      	adds	r3, r6, #4
 8001d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f001 fc18 	bl	80035bc <USB_CoreInit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0d0      	b.n	8001f40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fc7b 	bl	80036a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e04a      	b.n	8001e46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	333d      	adds	r3, #61	; 0x3d
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	333c      	adds	r3, #60	; 0x3c
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	b298      	uxth	r0, r3
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3344      	adds	r3, #68	; 0x44
 8001dec:	4602      	mov	r2, r0
 8001dee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3340      	adds	r3, #64	; 0x40
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	334c      	adds	r3, #76	; 0x4c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3354      	adds	r3, #84	; 0x54
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	3301      	adds	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3af      	bcc.n	8001db0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e044      	b.n	8001ee0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3b5      	bcc.n	8001e56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	687e      	ldr	r6, [r7, #4]
 8001ef2:	466d      	mov	r5, sp
 8001ef4:	f106 0410 	add.w	r4, r6, #16
 8001ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f08:	1d33      	adds	r3, r6, #4
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	6838      	ldr	r0, [r7, #0]
 8001f0e:	f001 fc13 	bl	8003738 <USB_DevInit>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e00d      	b.n	8001f40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 fdde 	bl	8003afa <USB_DevDisconnect>

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e267      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d075      	beq.n	8002052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d112      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b82      	ldr	r3, [pc, #520]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05b      	beq.n	8002050 <HAL_RCC_OscConfig+0x108>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d157      	bne.n	8002050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e242      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x74>
 8001fae:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6f      	ldr	r2, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6c      	ldr	r2, [pc, #432]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fe0:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f882 	bl	8001108 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f87e 	bl	8001108 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e207      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xc0>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f86e 	bl	8001108 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f86a 	bl	8001108 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1f3      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0xe8>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205e:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1c7      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e03a      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCC_OscConfig+0x244>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f823 	bl	8001108 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff f81f 	bl	8001108 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1a8      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4925      	ldr	r1, [pc, #148]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_OscConfig+0x244>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f802 	bl	8001108 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002108:	f7fe fffe 	bl	8001108 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e187      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_RCC_OscConfig+0x248>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe ffe2 	bl	8001108 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7fe ffde 	bl	8001108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e167      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x200>
 8002166:	e01b      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_OscConfig+0x248>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe ffcb 	bl	8001108 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe ffc7 	bl	8001108 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d907      	bls.n	8002194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e150      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 8002188:	40023800 	.word	0x40023800
 800218c:	42470000 	.word	0x42470000
 8002190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ea      	bne.n	8002176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8097 	beq.w	80022dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a7c      	ldr	r2, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b77      	ldr	r3, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b74      	ldr	r3, [pc, #464]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a73      	ldr	r2, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe ff87 	bl	8001108 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe ff83 	bl	8001108 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e10c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x2ea>
 8002224:	4b64      	ldr	r3, [pc, #400]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a63      	ldr	r2, [pc, #396]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x30c>
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a5e      	ldr	r2, [pc, #376]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a5b      	ldr	r2, [pc, #364]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a54      	ldr	r2, [pc, #336]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7fe ff48 	bl	8001108 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe ff44 	bl	8001108 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0cb      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <HAL_RCC_OscConfig+0x334>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe ff32 	bl	8001108 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe ff2e 	bl	8001108 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0b5      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ee      	bne.n	80022a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a1 	beq.w	8002428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d05c      	beq.n	80023ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d141      	bne.n	800237e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ff02 	bl	8001108 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fefe 	bl	8001108 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e087      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	491b      	ldr	r1, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fed7 	bl	8001108 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fed3 	bl	8001108 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e05c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x416>
 800237c:	e054      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fec0 	bl	8001108 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe febc 	bl	8001108 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e045      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e038      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x4ec>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d028      	beq.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d121      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0cc      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d90c      	bls.n	8002474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d044      	beq.n	8002558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d119      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e067      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4934      	ldr	r1, [pc, #208]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fdee 	bl	8001108 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fdea 	bl	8001108 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e04f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d20c      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	490a      	ldr	r1, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	5ccb      	ldrb	r3, [r1, r3]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fba6 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08005a84 	.word	0x08005a84
 80025fc:	20000024 	.word	0x20000024
 8002600:	2000004c 	.word	0x2000004c

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b094      	sub	sp, #80	; 0x50
 800260a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	647b      	str	r3, [r7, #68]	; 0x44
 8002610:	2300      	movs	r3, #0
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261c:	4b79      	ldr	r3, [pc, #484]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d00d      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 8002628:	2b08      	cmp	r3, #8
 800262a:	f200 80e1 	bhi.w	80027f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x34>
 8002632:	2b04      	cmp	r3, #4
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x3a>
 8002636:	e0db      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b73      	ldr	r3, [pc, #460]	; (8002808 <HAL_RCC_GetSysClockFreq+0x204>)
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800263c:	e0db      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCC_GetSysClockFreq+0x208>)
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002642:	e0d8      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800264c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264e:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
 8002664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
 8002672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002676:	4622      	mov	r2, r4
 8002678:	462b      	mov	r3, r5
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002688:	0150      	lsls	r0, r2, #5
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4621      	mov	r1, r4
 8002690:	1a51      	subs	r1, r2, r1
 8002692:	6139      	str	r1, [r7, #16]
 8002694:	4629      	mov	r1, r5
 8002696:	eb63 0301 	sbc.w	r3, r3, r1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a8:	4659      	mov	r1, fp
 80026aa:	018b      	lsls	r3, r1, #6
 80026ac:	4651      	mov	r1, sl
 80026ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b2:	4651      	mov	r1, sl
 80026b4:	018a      	lsls	r2, r1, #6
 80026b6:	4651      	mov	r1, sl
 80026b8:	ebb2 0801 	subs.w	r8, r2, r1
 80026bc:	4659      	mov	r1, fp
 80026be:	eb63 0901 	sbc.w	r9, r3, r1
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d6:	4690      	mov	r8, r2
 80026d8:	4699      	mov	r9, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	eb18 0303 	adds.w	r3, r8, r3
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	462b      	mov	r3, r5
 80026e4:	eb49 0303 	adc.w	r3, r9, r3
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026f6:	4629      	mov	r1, r5
 80026f8:	024b      	lsls	r3, r1, #9
 80026fa:	4621      	mov	r1, r4
 80026fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002700:	4621      	mov	r1, r4
 8002702:	024a      	lsls	r2, r1, #9
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270a:	2200      	movs	r2, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
 800270e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002714:	f7fd fdc4 	bl	80002a0 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002720:	e058      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b38      	ldr	r3, [pc, #224]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	2200      	movs	r2, #0
 800272a:	4618      	mov	r0, r3
 800272c:	4611      	mov	r1, r2
 800272e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	f04f 0000 	mov.w	r0, #0
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	0159      	lsls	r1, r3, #5
 800274a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274e:	0150      	lsls	r0, r2, #5
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4641      	mov	r1, r8
 8002756:	ebb2 0a01 	subs.w	sl, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800276c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002774:	ebb2 040a 	subs.w	r4, r2, sl
 8002778:	eb63 050b 	sbc.w	r5, r3, fp
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	00eb      	lsls	r3, r5, #3
 8002786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4643      	mov	r3, r8
 8002792:	18e3      	adds	r3, r4, r3
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	464b      	mov	r3, r9
 8002798:	eb45 0303 	adc.w	r3, r5, r3
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027aa:	4629      	mov	r1, r5
 80027ac:	028b      	lsls	r3, r1, #10
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b4:	4621      	mov	r1, r4
 80027b6:	028a      	lsls	r2, r1, #10
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027be:	2200      	movs	r2, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	61fa      	str	r2, [r7, #28]
 80027c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c8:	f7fd fd6a 	bl	80002a0 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4613      	mov	r3, r2
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	3301      	adds	r3, #1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3750      	adds	r7, #80	; 0x50
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	00f42400 	.word	0x00f42400
 800280c:	007a1200 	.word	0x007a1200

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_GetHCLKFreq+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000024 	.word	0x20000024

08002828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800282c:	f7ff fff0 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0a9b      	lsrs	r3, r3, #10
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <HAL_RCC_GetPCLK1Freq+0x24>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	08005a94 	.word	0x08005a94

08002850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002854:	f7ff ffdc 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0b5b      	lsrs	r3, r3, #13
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	08005a94 	.word	0x08005a94

08002878 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	220f      	movs	r2, #15
 8002886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_GetClockConfig+0x5c>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_GetClockConfig+0x5c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	08db      	lsrs	r3, r3, #3
 80028b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_RCC_GetClockConfig+0x60>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40023c00 	.word	0x40023c00

080028dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e041      	b.n	8002972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f839 	bl	800297a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f000 f9d8 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04e      	b.n	8002a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d01d      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x80>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d010      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	e007      	b.n	8002a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00
 8002a64:	40010400 	.word	0x40010400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40001800 	.word	0x40001800

08002a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0202 	mvn.w	r2, #2
 8002a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8ee 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8e0 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8f1 	bl	8002ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0204 	mvn.w	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8c4 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8b6 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8c7 	bl	8002ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f89a 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f88c 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f89d 	bl	8002ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f870 	bl	8002c94 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f862 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f873 	bl	8002ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fef2 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f902 	bl	8002e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f838 	bl	8002cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0220 	mvn.w	r2, #32
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8cc 	bl	8002e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	; (8002de8 <TIM_Base_SetConfig+0x118>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <TIM_Base_SetConfig+0x11c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <TIM_Base_SetConfig+0x120>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d027      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <TIM_Base_SetConfig+0x118>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d023      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <TIM_Base_SetConfig+0x11c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <TIM_Base_SetConfig+0x120>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d017      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <TIM_Base_SetConfig+0x128>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <TIM_Base_SetConfig+0x12c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <TIM_Base_SetConfig+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <TIM_Base_SetConfig+0x134>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <TIM_Base_SetConfig+0x138>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <TIM_Base_SetConfig+0x13c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0xf8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40010400 	.word	0x40010400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	40001800 	.word	0x40001800
 8002e08:	40001c00 	.word	0x40001c00
 8002e0c:	40002000 	.word	0x40002000

08002e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03f      	b.n	8002eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd fec4 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f929 	bl	80030d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d17c      	bne.n	8002fec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_UART_Transmit+0x2c>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e075      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit+0x3e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e06e      	b.n	8002fee <HAL_UART_Transmit+0x11c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f26:	f7fe f8ef 	bl	8001108 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d108      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e003      	b.n	8002f5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f64:	e02a      	b.n	8002fbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f840 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e036      	b.n	8002fee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e007      	b.n	8002fae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cf      	bne.n	8002f66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f810 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b090      	sub	sp, #64	; 0x40
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	e050      	b.n	80030aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d04c      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
 8003016:	f7fe f877 	bl	8001108 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003022:	429a      	cmp	r2, r3
 8003024:	d241      	bcs.n	80030aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800303c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003046:	637a      	str	r2, [r7, #52]	; 0x34
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e5      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	613b      	str	r3, [r7, #16]
   return(result);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800307a:	623a      	str	r2, [r7, #32]
 800307c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	69f9      	ldr	r1, [r7, #28]
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	61bb      	str	r3, [r7, #24]
   return(result);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e5      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e00f      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d09f      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3740      	adds	r7, #64	; 0x40
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b0c0      	sub	sp, #256	; 0x100
 80030da:	af00      	add	r7, sp, #0
 80030dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	68d9      	ldr	r1, [r3, #12]
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	ea40 0301 	orr.w	r3, r0, r1
 80030fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	431a      	orrs	r2, r3
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800312c:	f021 010c 	bic.w	r1, r1, #12
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	6999      	ldr	r1, [r3, #24]
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	ea40 0301 	orr.w	r3, r0, r1
 800315a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <UART_SetConfig+0x2cc>)
 8003164:	429a      	cmp	r2, r3
 8003166:	d005      	beq.n	8003174 <UART_SetConfig+0xa0>
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b8d      	ldr	r3, [pc, #564]	; (80033a4 <UART_SetConfig+0x2d0>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d104      	bne.n	800317e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fb6c 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8003178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800317c:	e003      	b.n	8003186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7ff fb53 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	f040 810c 	bne.w	80033ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800319e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	1891      	adds	r1, r2, r2
 80031ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ae:	415b      	adcs	r3, r3
 80031b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b6:	4621      	mov	r1, r4
 80031b8:	eb12 0801 	adds.w	r8, r2, r1
 80031bc:	4629      	mov	r1, r5
 80031be:	eb43 0901 	adc.w	r9, r3, r1
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031d6:	4690      	mov	r8, r2
 80031d8:	4699      	mov	r9, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	eb18 0303 	adds.w	r3, r8, r3
 80031e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031e4:	462b      	mov	r3, r5
 80031e6:	eb49 0303 	adc.w	r3, r9, r3
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003202:	460b      	mov	r3, r1
 8003204:	18db      	adds	r3, r3, r3
 8003206:	653b      	str	r3, [r7, #80]	; 0x50
 8003208:	4613      	mov	r3, r2
 800320a:	eb42 0303 	adc.w	r3, r2, r3
 800320e:	657b      	str	r3, [r7, #84]	; 0x54
 8003210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003218:	f7fd f842 	bl	80002a0 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2302 	umull	r2, r3, r3, r2
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	011c      	lsls	r4, r3, #4
 800322a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	64b9      	str	r1, [r7, #72]	; 0x48
 8003244:	415b      	adcs	r3, r3
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800324c:	4641      	mov	r1, r8
 800324e:	eb12 0a01 	adds.w	sl, r2, r1
 8003252:	4649      	mov	r1, r9
 8003254:	eb43 0b01 	adc.w	fp, r3, r1
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326c:	4692      	mov	sl, r2
 800326e:	469b      	mov	fp, r3
 8003270:	4643      	mov	r3, r8
 8003272:	eb1a 0303 	adds.w	r3, sl, r3
 8003276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800327a:	464b      	mov	r3, r9
 800327c:	eb4b 0303 	adc.w	r3, fp, r3
 8003280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003298:	460b      	mov	r3, r1
 800329a:	18db      	adds	r3, r3, r3
 800329c:	643b      	str	r3, [r7, #64]	; 0x40
 800329e:	4613      	mov	r3, r2
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
 80032a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ae:	f7fc fff7 	bl	80002a0 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <UART_SetConfig+0x2d4>)
 80032ba:	fba3 2301 	umull	r2, r3, r3, r1
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2264      	movs	r2, #100	; 0x64
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	1acb      	subs	r3, r1, r3
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032ce:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <UART_SetConfig+0x2d4>)
 80032d0:	fba3 2302 	umull	r2, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032dc:	441c      	add	r4, r3
 80032de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032f0:	4642      	mov	r2, r8
 80032f2:	464b      	mov	r3, r9
 80032f4:	1891      	adds	r1, r2, r2
 80032f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032f8:	415b      	adcs	r3, r3
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003300:	4641      	mov	r1, r8
 8003302:	1851      	adds	r1, r2, r1
 8003304:	6339      	str	r1, [r7, #48]	; 0x30
 8003306:	4649      	mov	r1, r9
 8003308:	414b      	adcs	r3, r1
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003318:	4659      	mov	r1, fp
 800331a:	00cb      	lsls	r3, r1, #3
 800331c:	4651      	mov	r1, sl
 800331e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003322:	4651      	mov	r1, sl
 8003324:	00ca      	lsls	r2, r1, #3
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	4603      	mov	r3, r0
 800332c:	4642      	mov	r2, r8
 800332e:	189b      	adds	r3, r3, r2
 8003330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003334:	464b      	mov	r3, r9
 8003336:	460a      	mov	r2, r1
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800334c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003354:	460b      	mov	r3, r1
 8003356:	18db      	adds	r3, r3, r3
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
 800335a:	4613      	mov	r3, r2
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800336a:	f7fc ff99 	bl	80002a0 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <UART_SetConfig+0x2d4>)
 8003374:	fba3 1302 	umull	r1, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	2164      	movs	r1, #100	; 0x64
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3332      	adds	r3, #50	; 0x32
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <UART_SetConfig+0x2d4>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	f003 0207 	and.w	r2, r3, #7
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4422      	add	r2, r4
 800339a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800339c:	e105      	b.n	80035aa <UART_SetConfig+0x4d6>
 800339e:	bf00      	nop
 80033a0:	40011000 	.word	0x40011000
 80033a4:	40011400 	.word	0x40011400
 80033a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	6239      	str	r1, [r7, #32]
 80033c6:	415b      	adcs	r3, r3
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ce:	4641      	mov	r1, r8
 80033d0:	1854      	adds	r4, r2, r1
 80033d2:	4649      	mov	r1, r9
 80033d4:	eb43 0501 	adc.w	r5, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	00eb      	lsls	r3, r5, #3
 80033e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e6:	00e2      	lsls	r2, r4, #3
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	18e3      	adds	r3, r4, r3
 80033f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033f4:	464b      	mov	r3, r9
 80033f6:	eb45 0303 	adc.w	r3, r5, r3
 80033fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800340a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800341a:	4629      	mov	r1, r5
 800341c:	008b      	lsls	r3, r1, #2
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003424:	4621      	mov	r1, r4
 8003426:	008a      	lsls	r2, r1, #2
 8003428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800342c:	f7fc ff38 	bl	80002a0 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b60      	ldr	r3, [pc, #384]	; (80035b8 <UART_SetConfig+0x4e4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800344c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	61b9      	str	r1, [r7, #24]
 8003458:	415b      	adcs	r3, r3
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	4641      	mov	r1, r8
 8003462:	1851      	adds	r1, r2, r1
 8003464:	6139      	str	r1, [r7, #16]
 8003466:	4649      	mov	r1, r9
 8003468:	414b      	adcs	r3, r1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003478:	4659      	mov	r1, fp
 800347a:	00cb      	lsls	r3, r1, #3
 800347c:	4651      	mov	r1, sl
 800347e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003482:	4651      	mov	r1, sl
 8003484:	00ca      	lsls	r2, r1, #3
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	4603      	mov	r3, r0
 800348c:	4642      	mov	r2, r8
 800348e:	189b      	adds	r3, r3, r2
 8003490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003494:	464b      	mov	r3, r9
 8003496:	460a      	mov	r2, r1
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034b8:	4649      	mov	r1, r9
 80034ba:	008b      	lsls	r3, r1, #2
 80034bc:	4641      	mov	r1, r8
 80034be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c2:	4641      	mov	r1, r8
 80034c4:	008a      	lsls	r2, r1, #2
 80034c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ca:	f7fc fee9 	bl	80002a0 <__aeabi_uldivmod>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <UART_SetConfig+0x4e4>)
 80034d4:	fba3 1302 	umull	r1, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	2164      	movs	r1, #100	; 0x64
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	3332      	adds	r3, #50	; 0x32
 80034e6:	4a34      	ldr	r2, [pc, #208]	; (80035b8 <UART_SetConfig+0x4e4>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f2:	441c      	add	r4, r3
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	673b      	str	r3, [r7, #112]	; 0x70
 80034fc:	677a      	str	r2, [r7, #116]	; 0x74
 80034fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	1891      	adds	r1, r2, r2
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	415b      	adcs	r3, r3
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003512:	4641      	mov	r1, r8
 8003514:	1851      	adds	r1, r2, r1
 8003516:	6039      	str	r1, [r7, #0]
 8003518:	4649      	mov	r1, r9
 800351a:	414b      	adcs	r3, r1
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800352a:	4659      	mov	r1, fp
 800352c:	00cb      	lsls	r3, r1, #3
 800352e:	4651      	mov	r1, sl
 8003530:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003534:	4651      	mov	r1, sl
 8003536:	00ca      	lsls	r2, r1, #3
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	4603      	mov	r3, r0
 800353e:	4642      	mov	r2, r8
 8003540:	189b      	adds	r3, r3, r2
 8003542:	66bb      	str	r3, [r7, #104]	; 0x68
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	663b      	str	r3, [r7, #96]	; 0x60
 8003558:	667a      	str	r2, [r7, #100]	; 0x64
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003566:	4649      	mov	r1, r9
 8003568:	008b      	lsls	r3, r1, #2
 800356a:	4641      	mov	r1, r8
 800356c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003570:	4641      	mov	r1, r8
 8003572:	008a      	lsls	r2, r1, #2
 8003574:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003578:	f7fc fe92 	bl	80002a0 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <UART_SetConfig+0x4e4>)
 8003582:	fba3 1302 	umull	r1, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2164      	movs	r1, #100	; 0x64
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <UART_SetConfig+0x4e4>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4422      	add	r2, r4
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	bf00      	nop
 80035ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035bc:	b084      	sub	sp, #16
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	f107 001c 	add.w	r0, r7, #28
 80035ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d122      	bne.n	800361a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faa2 	bl	8003b58 <USB_CoreReset>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e01a      	b.n	8003650 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa96 	bl	8003b58 <USB_CoreReset>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
 8003642:	e005      	b.n	8003650 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10b      	bne.n	800366e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f043 0206 	orr.w	r2, r3, #6
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800367a:	b004      	add	sp, #16
 800367c:	4770      	bx	lr

0800367e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d115      	bne.n	80036ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7fd fd26 	bl	8001120 <HAL_Delay>
      ms++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa2e 	bl	8003b3c <USB_GetMode>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d01e      	beq.n	8003724 <USB_SetCurrentMode+0x84>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b31      	cmp	r3, #49	; 0x31
 80036ea:	d9f0      	bls.n	80036ce <USB_SetCurrentMode+0x2e>
 80036ec:	e01a      	b.n	8003724 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d115      	bne.n	8003720 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003700:	2001      	movs	r0, #1
 8003702:	f7fd fd0d 	bl	8001120 <HAL_Delay>
      ms++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa15 	bl	8003b3c <USB_GetMode>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <USB_SetCurrentMode+0x84>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b31      	cmp	r3, #49	; 0x31
 800371c:	d9f0      	bls.n	8003700 <USB_SetCurrentMode+0x60>
 800371e:	e001      	b.n	8003724 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e005      	b.n	8003730 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b32      	cmp	r3, #50	; 0x32
 8003728:	d101      	bne.n	800372e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003738:	b084      	sub	sp, #16
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e009      	b.n	800376c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3340      	adds	r3, #64	; 0x40
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	3301      	adds	r3, #1
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0e      	cmp	r3, #14
 8003770:	d9f2      	bls.n	8003758 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11c      	bne.n	80037b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
 80037b0:	e00b      	b.n	80037ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	4619      	mov	r1, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	461a      	mov	r2, r3
 80037e6:	680b      	ldr	r3, [r1, #0]
 80037e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037f6:	2100      	movs	r1, #0
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f965 	bl	8003ac8 <USB_SetDevSpeed>
 80037fe:	e008      	b.n	8003812 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003800:	2101      	movs	r1, #1
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f960 	bl	8003ac8 <USB_SetDevSpeed>
 8003808:	e003      	b.n	8003812 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800380a:	2103      	movs	r1, #3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f95b 	bl	8003ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003812:	2110      	movs	r1, #16
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8f3 	bl	8003a00 <USB_FlushTxFifo>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f91f 	bl	8003a68 <USB_FlushRxFifo>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	e043      	b.n	80038e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003874:	d118      	bne.n	80038a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	461a      	mov	r2, r3
 800388a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e013      	b.n	80038ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389e:	461a      	mov	r2, r3
 80038a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e008      	b.n	80038ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	461a      	mov	r2, r3
 80038c8:	2300      	movs	r3, #0
 80038ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d8:	461a      	mov	r2, r3
 80038da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3301      	adds	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3b7      	bcc.n	800385e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e043      	b.n	800397c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800390a:	d118      	bne.n	800393e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e013      	b.n	8003950 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	461a      	mov	r2, r3
 8003936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e008      	b.n	8003950 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	2300      	movs	r3, #0
 800394e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	2300      	movs	r3, #0
 8003960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	3301      	adds	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d3b7      	bcc.n	80038f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f043 0210 	orr.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <USB_DevInit+0x2c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f043 0208 	orr.w	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039f8:	b004      	add	sp, #16
 80039fa:	4770      	bx	lr
 80039fc:	803c3800 	.word	0x803c3800

08003a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <USB_FlushTxFifo+0x64>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e01b      	b.n	8003a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	daf2      	bge.n	8003a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <USB_FlushTxFifo+0x64>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e006      	b.n	8003a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d0f0      	beq.n	8003a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	00030d40 	.word	0x00030d40

08003a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <USB_FlushRxFifo+0x5c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e018      	b.n	8003ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	daf2      	bge.n	8003a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2210      	movs	r2, #16
 8003a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <USB_FlushRxFifo+0x5c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e006      	b.n	8003ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d0f0      	beq.n	8003a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	00030d40 	.word	0x00030d40

08003ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b14:	f023 0303 	bic.w	r3, r3, #3
 8003b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0301 	and.w	r3, r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <USB_CoreReset+0x64>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e01b      	b.n	8003bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	daf2      	bge.n	8003b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <USB_CoreReset+0x64>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e006      	b.n	8003bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d0f0      	beq.n	8003b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	00030d40 	.word	0x00030d40

08003bc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd2:	2b84      	cmp	r3, #132	; 0x84
 8003bd4:	d005      	beq.n	8003be2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3303      	adds	r3, #3
 8003be0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf6:	f3ef 8305 	mrs	r3, IPSR
 8003bfa:	607b      	str	r3, [r7, #4]
  return(result);
 8003bfc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c18:	f000 f9fe 	bl	8004018 <vTaskStartScheduler>
  
  return osOK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003c26:	f7ff ffe3 	bl	8003bf0 <inHandlerMode>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003c30:	f000 fafc 	bl	800422c <xTaskGetTickCountFromISR>
 8003c34:	4603      	mov	r3, r0
 8003c36:	e002      	b.n	8003c3e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003c38:	f000 fae8 	bl	800420c <xTaskGetTickCount>
 8003c3c:	4603      	mov	r3, r0
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c44:	b087      	sub	sp, #28
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685c      	ldr	r4, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c58:	b29e      	uxth	r6, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ffad 	bl	8003bc0 <makeFreeRtosPriority>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	9200      	str	r2, [sp, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4632      	mov	r2, r6
 8003c74:	4629      	mov	r1, r5
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 f885 	bl	8003d86 <xTaskCreate>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f103 0208 	add.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 0208 	add.w	r2, r3, #8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f103 0208 	add.w	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6852      	ldr	r2, [r2, #4]
 8003d52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d103      	bne.n	8003d66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08c      	sub	sp, #48	; 0x30
 8003d8a:	af04      	add	r7, sp, #16
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fea4 	bl	8004ae8 <pvPortMalloc>
 8003da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003da8:	20b4      	movs	r0, #180	; 0xb4
 8003daa:	f000 fe9d 	bl	8004ae8 <pvPortMalloc>
 8003dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
 8003dbc:	e005      	b.n	8003dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f000 ff5e 	bl	8004c80 <vPortFree>
 8003dc4:	e001      	b.n	8003dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9303      	str	r3, [sp, #12]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	9302      	str	r3, [sp, #8]
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f80e 	bl	8003e08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dec:	69f8      	ldr	r0, [r7, #28]
 8003dee:	f000 f8a9 	bl	8003f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e002      	b.n	8003dfe <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e20:	3b01      	subs	r3, #1
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f023 0307 	bic.w	r3, r3, #7
 8003e2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01f      	beq.n	8003e96 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e012      	b.n	8003e82 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	7819      	ldrb	r1, [r3, #0]
 8003e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3334      	adds	r3, #52	; 0x34
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d9e9      	bls.n	8003e5c <prvInitialiseNewTask+0x54>
 8003e88:	e000      	b.n	8003e8c <prvInitialiseNewTask+0x84>
			{
				break;
 8003e8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e94:	e003      	b.n	8003e9e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d901      	bls.n	8003ea8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff06 	bl	8003cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff01 	bl	8003cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f1c3 0207 	rsb	r2, r3, #7
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	334c      	adds	r3, #76	; 0x4c
 8003ef8:	2260      	movs	r2, #96	; 0x60
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f817 	bl	8004f30 <memset>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <prvInitialiseNewTask+0x130>)
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <prvInitialiseNewTask+0x134>)
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <prvInitialiseNewTask+0x138>)
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	69b8      	ldr	r0, [r7, #24]
 8003f1a:	f000 fb93 	bl	8004644 <pxPortInitialiseStack>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f30:	bf00      	nop
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	08005abc 	.word	0x08005abc
 8003f3c:	08005adc 	.word	0x08005adc
 8003f40:	08005a9c 	.word	0x08005a9c

08003f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f4c:	f000 fcaa 	bl	80048a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f62:	4a27      	ldr	r2, [pc, #156]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d110      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f70:	f000 fac4 	bl	80044fc <prvInitialiseTaskLists>
 8003f74:	e00d      	b.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <prvAddNewTaskToReadyList+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d802      	bhi.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <prvAddNewTaskToReadyList+0xc4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <prvAddNewTaskToReadyList+0xc4>)
 8003f9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <prvAddNewTaskToReadyList+0xc8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <prvAddNewTaskToReadyList+0xc8>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <prvAddNewTaskToReadyList+0xcc>)
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7ff fe90 	bl	8003cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fca:	f000 fc9b 	bl	8004904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <prvAddNewTaskToReadyList+0xc0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d207      	bcs.n	8003ff4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <prvAddNewTaskToReadyList+0xd0>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200009b4 	.word	0x200009b4
 8004000:	200008b4 	.word	0x200008b4
 8004004:	200009c0 	.word	0x200009c0
 8004008:	200009d0 	.word	0x200009d0
 800400c:	200009bc 	.word	0x200009bc
 8004010:	200008b8 	.word	0x200008b8
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <vTaskStartScheduler+0x80>)
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2300      	movs	r3, #0
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	491c      	ldr	r1, [pc, #112]	; (800409c <vTaskStartScheduler+0x84>)
 800402c:	481c      	ldr	r0, [pc, #112]	; (80040a0 <vTaskStartScheduler+0x88>)
 800402e:	f7ff feaa 	bl	8003d86 <xTaskCreate>
 8004032:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d11b      	bne.n	8004072 <vTaskStartScheduler+0x5a>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60bb      	str	r3, [r7, #8]
}
 800404c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <vTaskStartScheduler+0x8c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	334c      	adds	r3, #76	; 0x4c
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <vTaskStartScheduler+0x90>)
 8004056:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <vTaskStartScheduler+0x94>)
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <vTaskStartScheduler+0x98>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <vTaskStartScheduler+0x9c>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800406c:	f000 fb78 	bl	8004760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004070:	e00e      	b.n	8004090 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d10a      	bne.n	8004090 <vTaskStartScheduler+0x78>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vTaskStartScheduler+0x76>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200009d8 	.word	0x200009d8
 800409c:	08005a7c 	.word	0x08005a7c
 80040a0:	080044cd 	.word	0x080044cd
 80040a4:	200008b4 	.word	0x200008b4
 80040a8:	20000058 	.word	0x20000058
 80040ac:	200009d4 	.word	0x200009d4
 80040b0:	200009c0 	.word	0x200009c0
 80040b4:	200009b8 	.word	0x200009b8

080040b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	200009dc 	.word	0x200009dc

080040d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <xTaskResumeAll+0x114>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xTaskResumeAll+0x2c>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	603b      	str	r3, [r7, #0]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004100:	f000 fbd0 	bl	80048a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <xTaskResumeAll+0x114>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a37      	ldr	r2, [pc, #220]	; (80041e8 <xTaskResumeAll+0x114>)
 800410c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <xTaskResumeAll+0x114>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d161      	bne.n	80041da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004116:	4b35      	ldr	r3, [pc, #212]	; (80041ec <xTaskResumeAll+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d05d      	beq.n	80041da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800411e:	e02e      	b.n	800417e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004120:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <xTaskResumeAll+0x11c>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe00 	bl	8003d32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fdfb 	bl	8003d32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2201      	movs	r2, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <xTaskResumeAll+0x120>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <xTaskResumeAll+0x120>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <xTaskResumeAll+0x124>)
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7ff fdc0 	bl	8003cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <xTaskResumeAll+0x128>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <xTaskResumeAll+0x12c>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <xTaskResumeAll+0x11c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cc      	bne.n	8004120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800418c:	f000 fa3a 	bl	8004604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <xTaskResumeAll+0x130>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800419c:	f000 f87c 	bl	8004298 <xTaskIncrementTick>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <xTaskResumeAll+0x12c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f1      	bne.n	800419c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <xTaskResumeAll+0x130>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <xTaskResumeAll+0x12c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <xTaskResumeAll+0x134>)
 80041cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041da:	f000 fb93 	bl	8004904 <vPortExitCritical>

	return xAlreadyYielded;
 80041de:	68bb      	ldr	r3, [r7, #8]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200009dc 	.word	0x200009dc
 80041ec:	200009b4 	.word	0x200009b4
 80041f0:	20000974 	.word	0x20000974
 80041f4:	200009bc 	.word	0x200009bc
 80041f8:	200008b8 	.word	0x200008b8
 80041fc:	200008b4 	.word	0x200008b4
 8004200:	200009c8 	.word	0x200009c8
 8004204:	200009c4 	.word	0x200009c4
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <xTaskGetTickCount+0x1c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004218:	687b      	ldr	r3, [r7, #4]
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	200009b8 	.word	0x200009b8

0800422c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004232:	f000 fc19 	bl	8004a68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <xTaskGetTickCountFromISR+0x20>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004240:	683b      	ldr	r3, [r7, #0]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200009b8 	.word	0x200009b8

08004250 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <pcTaskGetName+0x14>
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <pcTaskGetName+0x44>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e000      	b.n	8004266 <pcTaskGetName+0x16>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <pcTaskGetName+0x34>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60bb      	str	r3, [r7, #8]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3334      	adds	r3, #52	; 0x34
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	200008b4 	.word	0x200008b4

08004298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a2:	4b4e      	ldr	r3, [pc, #312]	; (80043dc <xTaskIncrementTick+0x144>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 808e 	bne.w	80043c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <xTaskIncrementTick+0x148>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042b4:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <xTaskIncrementTick+0x148>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d120      	bne.n	8004302 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042c0:	4b48      	ldr	r3, [pc, #288]	; (80043e4 <xTaskIncrementTick+0x14c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	603b      	str	r3, [r7, #0]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <xTaskIncrementTick+0x46>
 80042e0:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <xTaskIncrementTick+0x14c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <xTaskIncrementTick+0x150>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3e      	ldr	r2, [pc, #248]	; (80043e4 <xTaskIncrementTick+0x14c>)
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4a3e      	ldr	r2, [pc, #248]	; (80043e8 <xTaskIncrementTick+0x150>)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <xTaskIncrementTick+0x154>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	4a3c      	ldr	r2, [pc, #240]	; (80043ec <xTaskIncrementTick+0x154>)
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	f000 f981 	bl	8004604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <xTaskIncrementTick+0x158>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d348      	bcc.n	800439e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <xTaskIncrementTick+0x14c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <xTaskIncrementTick+0x158>)
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	601a      	str	r2, [r3, #0]
					break;
 800431e:	e03e      	b.n	800439e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <xTaskIncrementTick+0x14c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d203      	bcs.n	8004340 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004338:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <xTaskIncrementTick+0x158>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800433e:	e02e      	b.n	800439e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fcf4 	bl	8003d32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3318      	adds	r3, #24
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fceb 	bl	8003d32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <xTaskIncrementTick+0x15c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <xTaskIncrementTick+0x15c>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <xTaskIncrementTick+0x160>)
 800437c:	441a      	add	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7ff fcb0 	bl	8003cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <xTaskIncrementTick+0x164>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d3b9      	bcc.n	800430c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439c:	e7b6      	b.n	800430c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <xTaskIncrementTick+0x164>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	4914      	ldr	r1, [pc, #80]	; (80043f8 <xTaskIncrementTick+0x160>)
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d901      	bls.n	80043ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <xTaskIncrementTick+0x168>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e004      	b.n	80043d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <xTaskIncrementTick+0x16c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <xTaskIncrementTick+0x16c>)
 80043d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200009dc 	.word	0x200009dc
 80043e0:	200009b8 	.word	0x200009b8
 80043e4:	2000096c 	.word	0x2000096c
 80043e8:	20000970 	.word	0x20000970
 80043ec:	200009cc 	.word	0x200009cc
 80043f0:	200009d4 	.word	0x200009d4
 80043f4:	200009bc 	.word	0x200009bc
 80043f8:	200008b8 	.word	0x200008b8
 80043fc:	200008b4 	.word	0x200008b4
 8004400:	200009c8 	.word	0x200009c8
 8004404:	200009c4 	.word	0x200009c4

08004408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <vTaskSwitchContext+0xac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <vTaskSwitchContext+0xb0>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800441c:	e044      	b.n	80044a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <vTaskSwitchContext+0xb0>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <vTaskSwitchContext+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	f1c3 031f 	rsb	r3, r3, #31
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	4921      	ldr	r1, [pc, #132]	; (80044c0 <vTaskSwitchContext+0xb8>)
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <vTaskSwitchContext+0x5c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <vTaskSwitchContext+0x5a>
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <vTaskSwitchContext+0xb8>)
 8004470:	4413      	add	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	3308      	adds	r3, #8
 8004486:	429a      	cmp	r2, r3
 8004488:	d104      	bne.n	8004494 <vTaskSwitchContext+0x8c>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <vTaskSwitchContext+0xbc>)
 800449c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <vTaskSwitchContext+0xbc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	334c      	adds	r3, #76	; 0x4c
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <vTaskSwitchContext+0xc0>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	200009dc 	.word	0x200009dc
 80044b8:	200009c8 	.word	0x200009c8
 80044bc:	200009bc 	.word	0x200009bc
 80044c0:	200008b8 	.word	0x200008b8
 80044c4:	200008b4 	.word	0x200008b4
 80044c8:	20000058 	.word	0x20000058

080044cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044d4:	f000 f852 	bl	800457c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <prvIdleTask+0x28>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d9f9      	bls.n	80044d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <prvIdleTask+0x2c>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f0:	e7f0      	b.n	80044d4 <prvIdleTask+0x8>
 80044f2:	bf00      	nop
 80044f4:	200008b8 	.word	0x200008b8
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	e00c      	b.n	8004522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <prvInitialiseTaskLists+0x60>)
 8004514:	4413      	add	r3, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fbba 	bl	8003c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3301      	adds	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d9ef      	bls.n	8004508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004528:	480d      	ldr	r0, [pc, #52]	; (8004560 <prvInitialiseTaskLists+0x64>)
 800452a:	f7ff fbb1 	bl	8003c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800452e:	480d      	ldr	r0, [pc, #52]	; (8004564 <prvInitialiseTaskLists+0x68>)
 8004530:	f7ff fbae 	bl	8003c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004534:	480c      	ldr	r0, [pc, #48]	; (8004568 <prvInitialiseTaskLists+0x6c>)
 8004536:	f7ff fbab 	bl	8003c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800453a:	480c      	ldr	r0, [pc, #48]	; (800456c <prvInitialiseTaskLists+0x70>)
 800453c:	f7ff fba8 	bl	8003c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004540:	480b      	ldr	r0, [pc, #44]	; (8004570 <prvInitialiseTaskLists+0x74>)
 8004542:	f7ff fba5 	bl	8003c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvInitialiseTaskLists+0x78>)
 8004548:	4a05      	ldr	r2, [pc, #20]	; (8004560 <prvInitialiseTaskLists+0x64>)
 800454a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvInitialiseTaskLists+0x7c>)
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <prvInitialiseTaskLists+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200008b8 	.word	0x200008b8
 8004560:	20000944 	.word	0x20000944
 8004564:	20000958 	.word	0x20000958
 8004568:	20000974 	.word	0x20000974
 800456c:	20000988 	.word	0x20000988
 8004570:	200009a0 	.word	0x200009a0
 8004574:	2000096c 	.word	0x2000096c
 8004578:	20000970 	.word	0x20000970

0800457c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004582:	e019      	b.n	80045b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004584:	f000 f98e 	bl	80048a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <prvCheckTasksWaitingTermination+0x50>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fbcc 	bl	8003d32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 80045a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ae:	f000 f9a9 	bl	8004904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f810 	bl	80045d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e1      	bne.n	8004584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000988 	.word	0x20000988
 80045d0:	200009b4 	.word	0x200009b4
 80045d4:	2000099c 	.word	0x2000099c

080045d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	334c      	adds	r3, #76	; 0x4c
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fd4d 	bl	8005084 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb46 	bl	8004c80 <vPortFree>
			vPortFree( pxTCB );
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fb43 	bl	8004c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <prvResetNextTaskUnblockTime+0x38>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <prvResetNextTaskUnblockTime+0x3c>)
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800461c:	e008      	b.n	8004630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvResetNextTaskUnblockTime+0x38>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <prvResetNextTaskUnblockTime+0x3c>)
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000096c 	.word	0x2000096c
 8004640:	200009d4 	.word	0x200009d4

08004644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b04      	subs	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800465c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0201 	bic.w	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b04      	subs	r3, #4
 8004672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004674:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <pxPortInitialiseStack+0x64>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b14      	subs	r3, #20
 800467e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b04      	subs	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f06f 0202 	mvn.w	r2, #2
 8004692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b20      	subs	r3, #32
 8004698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	080046ad 	.word	0x080046ad

080046ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <prvTaskExitError+0x54>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d00a      	beq.n	80046d6 <prvTaskExitError+0x2a>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <prvTaskExitError+0x28>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60bb      	str	r3, [r7, #8]
}
 80046e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ea:	bf00      	nop
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0fc      	beq.n	80046ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000054 	.word	0x20000054
	...

08004710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <pxCurrentTCBConst2>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f380 8809 	msr	PSP, r0
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	4770      	bx	lr
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst2>:
 8004730:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004738:	4808      	ldr	r0, [pc, #32]	; (800475c <prvPortStartFirstTask+0x24>)
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f380 8808 	msr	MSP, r0
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8814 	msr	CONTROL, r0
 800474a:	b662      	cpsie	i
 800474c:	b661      	cpsie	f
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	df00      	svc	0
 8004758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800475a:	bf00      	nop
 800475c:	e000ed08 	.word	0xe000ed08

08004760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004766:	4b46      	ldr	r3, [pc, #280]	; (8004880 <xPortStartScheduler+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a46      	ldr	r2, [pc, #280]	; (8004884 <xPortStartScheduler+0x124>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10a      	bne.n	8004786 <xPortStartScheduler+0x26>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	613b      	str	r3, [r7, #16]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004786:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <xPortStartScheduler+0x120>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3f      	ldr	r2, [pc, #252]	; (8004888 <xPortStartScheduler+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10a      	bne.n	80047a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047a6:	4b39      	ldr	r3, [pc, #228]	; (800488c <xPortStartScheduler+0x12c>)
 80047a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <xPortStartScheduler+0x130>)
 80047cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <xPortStartScheduler+0x134>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d4:	e009      	b.n	80047ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047d6:	4b2f      	ldr	r3, [pc, #188]	; (8004894 <xPortStartScheduler+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3b01      	subs	r3, #1
 80047dc:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <xPortStartScheduler+0x134>)
 80047de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d0ef      	beq.n	80047d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <xPortStartScheduler+0x134>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1c3 0307 	rsb	r3, r3, #7
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d00a      	beq.n	8004818 <xPortStartScheduler+0xb8>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60bb      	str	r3, [r7, #8]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <xPortStartScheduler+0x134>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <xPortStartScheduler+0x134>)
 8004820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <xPortStartScheduler+0x134>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800482a:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <xPortStartScheduler+0x134>)
 800482c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004836:	4b18      	ldr	r3, [pc, #96]	; (8004898 <xPortStartScheduler+0x138>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <xPortStartScheduler+0x138>)
 800483c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <xPortStartScheduler+0x138>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <xPortStartScheduler+0x138>)
 8004848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800484c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800484e:	f000 f8dd 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <xPortStartScheduler+0x13c>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004858:	f000 f8fc 	bl	8004a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <xPortStartScheduler+0x140>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <xPortStartScheduler+0x140>)
 8004862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004868:	f7ff ff66 	bl	8004738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800486c:	f7ff fdcc 	bl	8004408 <vTaskSwitchContext>
	prvTaskExitError();
 8004870:	f7ff ff1c 	bl	80046ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000ed00 	.word	0xe000ed00
 8004884:	410fc271 	.word	0x410fc271
 8004888:	410fc270 	.word	0x410fc270
 800488c:	e000e400 	.word	0xe000e400
 8004890:	200009e0 	.word	0x200009e0
 8004894:	200009e4 	.word	0x200009e4
 8004898:	e000ed20 	.word	0xe000ed20
 800489c:	20000054 	.word	0x20000054
 80048a0:	e000ef34 	.word	0xe000ef34

080048a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
}
 80048bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <vPortEnterCritical+0x58>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <vPortEnterCritical+0x58>)
 80048c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <vPortEnterCritical+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10f      	bne.n	80048f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <vPortEnterCritical+0x5c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortEnterCritical+0x4a>
	}
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000054 	.word	0x20000054
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <vPortExitCritical+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <vPortExitCritical+0x24>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	607b      	str	r3, [r7, #4]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vPortExitCritical+0x50>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <vPortExitCritical+0x50>)
 8004930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <vPortExitCritical+0x42>
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000054 	.word	0x20000054
	...

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f01e 0f10 	tst.w	lr, #16
 8004970:	bf08      	it	eq
 8004972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f7ff fd3a 	bl	8004408 <vTaskSwitchContext>
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f380 8811 	msr	BASEPRI, r0
 800499c:	bc09      	pop	{r0, r3}
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a6:	f01e 0f10 	tst.w	lr, #16
 80049aa:	bf08      	it	eq
 80049ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049b0:	f380 8809 	msr	PSP, r0
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w

080049c0 <pxCurrentTCBConst>:
 80049c0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7ff fc59 	bl	8004298 <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <SysTick_Handler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <vPortSetupTimerInterrupt+0x44>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e010 	.word	0xe000e010
 8004a44:	e000e018 	.word	0xe000e018
 8004a48:	20000024 	.word	0x20000024
 8004a4c:	10624dd3 	.word	0x10624dd3
 8004a50:	e000e014 	.word	0xe000e014

08004a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a64 <vPortEnableVFP+0x10>
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a5e:	6001      	str	r1, [r0, #0]
 8004a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a62:	bf00      	nop
 8004a64:	e000ed88 	.word	0xe000ed88

08004a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a6e:	f3ef 8305 	mrs	r3, IPSR
 8004a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d914      	bls.n	8004aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <vPortValidateInterruptPriority+0x70>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <vPortValidateInterruptPriority+0x74>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	7afa      	ldrb	r2, [r7, #11]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d20a      	bcs.n	8004aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <vPortValidateInterruptPriority+0x78>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <vPortValidateInterruptPriority+0x7c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d90a      	bls.n	8004aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	603b      	str	r3, [r7, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <vPortValidateInterruptPriority+0x60>
	}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	e000e3f0 	.word	0xe000e3f0
 8004adc:	200009e0 	.word	0x200009e0
 8004ae0:	e000ed0c 	.word	0xe000ed0c
 8004ae4:	200009e4 	.word	0x200009e4

08004ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af4:	f7ff fae0 	bl	80040b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004af8:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <pvPortMalloc+0x180>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b00:	f000 f920 	bl	8004d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <pvPortMalloc+0x184>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 8093 	bne.w	8004c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01d      	beq.n	8004b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b18:	2208      	movs	r2, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	3308      	adds	r3, #8
 8004b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <pvPortMalloc+0x6c>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	617b      	str	r3, [r7, #20]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d06e      	beq.n	8004c38 <pvPortMalloc+0x150>
 8004b5a:	4b45      	ldr	r3, [pc, #276]	; (8004c70 <pvPortMalloc+0x188>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d869      	bhi.n	8004c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <pvPortMalloc+0x18c>)
 8004b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b68:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <pvPortMalloc+0x18c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b6e:	e004      	b.n	8004b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d903      	bls.n	8004b8c <pvPortMalloc+0xa4>
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f1      	bne.n	8004b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b8c:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <pvPortMalloc+0x180>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d050      	beq.n	8004c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d91f      	bls.n	8004bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <pvPortMalloc+0xf8>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	613b      	str	r3, [r7, #16]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad2      	subs	r2, r2, r3
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bf2:	69b8      	ldr	r0, [r7, #24]
 8004bf4:	f000 f908 	bl	8004e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <pvPortMalloc+0x188>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <pvPortMalloc+0x188>)
 8004c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <pvPortMalloc+0x188>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <pvPortMalloc+0x190>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d203      	bcs.n	8004c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <pvPortMalloc+0x188>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <pvPortMalloc+0x190>)
 8004c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <pvPortMalloc+0x184>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <pvPortMalloc+0x194>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <pvPortMalloc+0x194>)
 8004c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c38:	f7ff fa4c 	bl	80040d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <pvPortMalloc+0x174>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	60fb      	str	r3, [r7, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <pvPortMalloc+0x172>
	return pvReturn;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3728      	adds	r7, #40	; 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200045f0 	.word	0x200045f0
 8004c6c:	20004604 	.word	0x20004604
 8004c70:	200045f4 	.word	0x200045f4
 8004c74:	200045e8 	.word	0x200045e8
 8004c78:	200045f8 	.word	0x200045f8
 8004c7c:	200045fc 	.word	0x200045fc

08004c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04d      	beq.n	8004d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c92:	2308      	movs	r3, #8
 8004c94:	425b      	negs	r3, r3
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <vPortFree+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <vPortFree+0x44>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	60fb      	str	r3, [r7, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <vPortFree+0x62>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60bb      	str	r3, [r7, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <vPortFree+0xb8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01e      	beq.n	8004d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11a      	bne.n	8004d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <vPortFree+0xb8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	401a      	ands	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d08:	f7ff f9d6 	bl	80040b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <vPortFree+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <vPortFree+0xbc>)
 8004d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f000 f874 	bl	8004e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vPortFree+0xc0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <vPortFree+0xc0>)
 8004d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d2a:	f7ff f9d3 	bl	80040d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20004604 	.word	0x20004604
 8004d3c:	200045f4 	.word	0x200045f4
 8004d40:	20004600 	.word	0x20004600

08004d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <prvHeapInit+0xac>)
 8004d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <prvHeapInit+0xac>)
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <prvHeapInit+0xb0>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d82:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <prvHeapInit+0xb0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d90:	2208      	movs	r2, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <prvHeapInit+0xb4>)
 8004da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <prvHeapInit+0xb4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <prvHeapInit+0xb4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvHeapInit+0xb4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <prvHeapInit+0xb8>)
 8004dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <prvHeapInit+0xbc>)
 8004dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <prvHeapInit+0xc0>)
 8004dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	200009e8 	.word	0x200009e8
 8004df4:	200045e8 	.word	0x200045e8
 8004df8:	200045f0 	.word	0x200045f0
 8004dfc:	200045f8 	.word	0x200045f8
 8004e00:	200045f4 	.word	0x200045f4
 8004e04:	20004604 	.word	0x20004604

08004e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <prvInsertBlockIntoFreeList+0xac>)
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e002      	b.n	8004e1c <prvInsertBlockIntoFreeList+0x14>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d8f7      	bhi.n	8004e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d108      	bne.n	8004e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d118      	bne.n	8004e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d00d      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e008      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e003      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d002      	beq.n	8004ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	200045e8 	.word	0x200045e8
 8004eb8:	200045f0 	.word	0x200045f0

08004ebc <__errno>:
 8004ebc:	4b01      	ldr	r3, [pc, #4]	; (8004ec4 <__errno+0x8>)
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000058 	.word	0x20000058

08004ec8 <__libc_init_array>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4d0d      	ldr	r5, [pc, #52]	; (8004f00 <__libc_init_array+0x38>)
 8004ecc:	4c0d      	ldr	r4, [pc, #52]	; (8004f04 <__libc_init_array+0x3c>)
 8004ece:	1b64      	subs	r4, r4, r5
 8004ed0:	10a4      	asrs	r4, r4, #2
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	42a6      	cmp	r6, r4
 8004ed6:	d109      	bne.n	8004eec <__libc_init_array+0x24>
 8004ed8:	4d0b      	ldr	r5, [pc, #44]	; (8004f08 <__libc_init_array+0x40>)
 8004eda:	4c0c      	ldr	r4, [pc, #48]	; (8004f0c <__libc_init_array+0x44>)
 8004edc:	f000 fcf8 	bl	80058d0 <_init>
 8004ee0:	1b64      	subs	r4, r4, r5
 8004ee2:	10a4      	asrs	r4, r4, #2
 8004ee4:	2600      	movs	r6, #0
 8004ee6:	42a6      	cmp	r6, r4
 8004ee8:	d105      	bne.n	8004ef6 <__libc_init_array+0x2e>
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef0:	4798      	blx	r3
 8004ef2:	3601      	adds	r6, #1
 8004ef4:	e7ee      	b.n	8004ed4 <__libc_init_array+0xc>
 8004ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efa:	4798      	blx	r3
 8004efc:	3601      	adds	r6, #1
 8004efe:	e7f2      	b.n	8004ee6 <__libc_init_array+0x1e>
 8004f00:	08005b38 	.word	0x08005b38
 8004f04:	08005b38 	.word	0x08005b38
 8004f08:	08005b38 	.word	0x08005b38
 8004f0c:	08005b3c 	.word	0x08005b3c

08004f10 <__retarget_lock_acquire_recursive>:
 8004f10:	4770      	bx	lr

08004f12 <__retarget_lock_release_recursive>:
 8004f12:	4770      	bx	lr

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <sbrk_aligned>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4e0e      	ldr	r6, [pc, #56]	; (8004f7c <sbrk_aligned+0x3c>)
 8004f44:	460c      	mov	r4, r1
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	4605      	mov	r5, r0
 8004f4a:	b911      	cbnz	r1, 8004f52 <sbrk_aligned+0x12>
 8004f4c:	f000 f8f6 	bl	800513c <_sbrk_r>
 8004f50:	6030      	str	r0, [r6, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f8f1 	bl	800513c <_sbrk_r>
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	d00a      	beq.n	8004f74 <sbrk_aligned+0x34>
 8004f5e:	1cc4      	adds	r4, r0, #3
 8004f60:	f024 0403 	bic.w	r4, r4, #3
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d007      	beq.n	8004f78 <sbrk_aligned+0x38>
 8004f68:	1a21      	subs	r1, r4, r0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f8e6 	bl	800513c <_sbrk_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d101      	bne.n	8004f78 <sbrk_aligned+0x38>
 8004f74:	f04f 34ff 	mov.w	r4, #4294967295
 8004f78:	4620      	mov	r0, r4
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	20004610 	.word	0x20004610

08004f80 <_malloc_r>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	1ccd      	adds	r5, r1, #3
 8004f86:	f025 0503 	bic.w	r5, r5, #3
 8004f8a:	3508      	adds	r5, #8
 8004f8c:	2d0c      	cmp	r5, #12
 8004f8e:	bf38      	it	cc
 8004f90:	250c      	movcc	r5, #12
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	4607      	mov	r7, r0
 8004f96:	db01      	blt.n	8004f9c <_malloc_r+0x1c>
 8004f98:	42a9      	cmp	r1, r5
 8004f9a:	d905      	bls.n	8004fa8 <_malloc_r+0x28>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	4e2e      	ldr	r6, [pc, #184]	; (8005064 <_malloc_r+0xe4>)
 8004faa:	f000 f8f7 	bl	800519c <__malloc_lock>
 8004fae:	6833      	ldr	r3, [r6, #0]
 8004fb0:	461c      	mov	r4, r3
 8004fb2:	bb34      	cbnz	r4, 8005002 <_malloc_r+0x82>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f7ff ffc2 	bl	8004f40 <sbrk_aligned>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	d14d      	bne.n	800505e <_malloc_r+0xde>
 8004fc2:	6834      	ldr	r4, [r6, #0]
 8004fc4:	4626      	mov	r6, r4
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	d140      	bne.n	800504c <_malloc_r+0xcc>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4638      	mov	r0, r7
 8004fd0:	eb04 0803 	add.w	r8, r4, r3
 8004fd4:	f000 f8b2 	bl	800513c <_sbrk_r>
 8004fd8:	4580      	cmp	r8, r0
 8004fda:	d13a      	bne.n	8005052 <_malloc_r+0xd2>
 8004fdc:	6821      	ldr	r1, [r4, #0]
 8004fde:	3503      	adds	r5, #3
 8004fe0:	1a6d      	subs	r5, r5, r1
 8004fe2:	f025 0503 	bic.w	r5, r5, #3
 8004fe6:	3508      	adds	r5, #8
 8004fe8:	2d0c      	cmp	r5, #12
 8004fea:	bf38      	it	cc
 8004fec:	250c      	movcc	r5, #12
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ffa5 	bl	8004f40 <sbrk_aligned>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d02b      	beq.n	8005052 <_malloc_r+0xd2>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	442b      	add	r3, r5
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	e00e      	b.n	8005020 <_malloc_r+0xa0>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	1b52      	subs	r2, r2, r5
 8005006:	d41e      	bmi.n	8005046 <_malloc_r+0xc6>
 8005008:	2a0b      	cmp	r2, #11
 800500a:	d916      	bls.n	800503a <_malloc_r+0xba>
 800500c:	1961      	adds	r1, r4, r5
 800500e:	42a3      	cmp	r3, r4
 8005010:	6025      	str	r5, [r4, #0]
 8005012:	bf18      	it	ne
 8005014:	6059      	strne	r1, [r3, #4]
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	bf08      	it	eq
 800501a:	6031      	streq	r1, [r6, #0]
 800501c:	5162      	str	r2, [r4, r5]
 800501e:	604b      	str	r3, [r1, #4]
 8005020:	4638      	mov	r0, r7
 8005022:	f104 060b 	add.w	r6, r4, #11
 8005026:	f000 f8bf 	bl	80051a8 <__malloc_unlock>
 800502a:	f026 0607 	bic.w	r6, r6, #7
 800502e:	1d23      	adds	r3, r4, #4
 8005030:	1af2      	subs	r2, r6, r3
 8005032:	d0b6      	beq.n	8004fa2 <_malloc_r+0x22>
 8005034:	1b9b      	subs	r3, r3, r6
 8005036:	50a3      	str	r3, [r4, r2]
 8005038:	e7b3      	b.n	8004fa2 <_malloc_r+0x22>
 800503a:	6862      	ldr	r2, [r4, #4]
 800503c:	42a3      	cmp	r3, r4
 800503e:	bf0c      	ite	eq
 8005040:	6032      	streq	r2, [r6, #0]
 8005042:	605a      	strne	r2, [r3, #4]
 8005044:	e7ec      	b.n	8005020 <_malloc_r+0xa0>
 8005046:	4623      	mov	r3, r4
 8005048:	6864      	ldr	r4, [r4, #4]
 800504a:	e7b2      	b.n	8004fb2 <_malloc_r+0x32>
 800504c:	4634      	mov	r4, r6
 800504e:	6876      	ldr	r6, [r6, #4]
 8005050:	e7b9      	b.n	8004fc6 <_malloc_r+0x46>
 8005052:	230c      	movs	r3, #12
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4638      	mov	r0, r7
 8005058:	f000 f8a6 	bl	80051a8 <__malloc_unlock>
 800505c:	e7a1      	b.n	8004fa2 <_malloc_r+0x22>
 800505e:	6025      	str	r5, [r4, #0]
 8005060:	e7de      	b.n	8005020 <_malloc_r+0xa0>
 8005062:	bf00      	nop
 8005064:	2000460c 	.word	0x2000460c

08005068 <cleanup_glue>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	460c      	mov	r4, r1
 800506c:	6809      	ldr	r1, [r1, #0]
 800506e:	4605      	mov	r5, r0
 8005070:	b109      	cbz	r1, 8005076 <cleanup_glue+0xe>
 8005072:	f7ff fff9 	bl	8005068 <cleanup_glue>
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800507e:	f000 b899 	b.w	80051b4 <_free_r>
	...

08005084 <_reclaim_reent>:
 8005084:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <_reclaim_reent+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4283      	cmp	r3, r0
 800508a:	b570      	push	{r4, r5, r6, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	d051      	beq.n	8005134 <_reclaim_reent+0xb0>
 8005090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005092:	b143      	cbz	r3, 80050a6 <_reclaim_reent+0x22>
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d14a      	bne.n	8005130 <_reclaim_reent+0xac>
 800509a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	b111      	cbz	r1, 80050a6 <_reclaim_reent+0x22>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 f887 	bl	80051b4 <_free_r>
 80050a6:	6961      	ldr	r1, [r4, #20]
 80050a8:	b111      	cbz	r1, 80050b0 <_reclaim_reent+0x2c>
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 f882 	bl	80051b4 <_free_r>
 80050b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050b2:	b111      	cbz	r1, 80050ba <_reclaim_reent+0x36>
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 f87d 	bl	80051b4 <_free_r>
 80050ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80050bc:	b111      	cbz	r1, 80050c4 <_reclaim_reent+0x40>
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f878 	bl	80051b4 <_free_r>
 80050c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80050c6:	b111      	cbz	r1, 80050ce <_reclaim_reent+0x4a>
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f873 	bl	80051b4 <_free_r>
 80050ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80050d0:	b111      	cbz	r1, 80050d8 <_reclaim_reent+0x54>
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f86e 	bl	80051b4 <_free_r>
 80050d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050da:	b111      	cbz	r1, 80050e2 <_reclaim_reent+0x5e>
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 f869 	bl	80051b4 <_free_r>
 80050e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80050e4:	b111      	cbz	r1, 80050ec <_reclaim_reent+0x68>
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 f864 	bl	80051b4 <_free_r>
 80050ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ee:	b111      	cbz	r1, 80050f6 <_reclaim_reent+0x72>
 80050f0:	4620      	mov	r0, r4
 80050f2:	f000 f85f 	bl	80051b4 <_free_r>
 80050f6:	69a3      	ldr	r3, [r4, #24]
 80050f8:	b1e3      	cbz	r3, 8005134 <_reclaim_reent+0xb0>
 80050fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050fc:	4620      	mov	r0, r4
 80050fe:	4798      	blx	r3
 8005100:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005102:	b1b9      	cbz	r1, 8005134 <_reclaim_reent+0xb0>
 8005104:	4620      	mov	r0, r4
 8005106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800510a:	f7ff bfad 	b.w	8005068 <cleanup_glue>
 800510e:	5949      	ldr	r1, [r1, r5]
 8005110:	b941      	cbnz	r1, 8005124 <_reclaim_reent+0xa0>
 8005112:	3504      	adds	r5, #4
 8005114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005116:	2d80      	cmp	r5, #128	; 0x80
 8005118:	68d9      	ldr	r1, [r3, #12]
 800511a:	d1f8      	bne.n	800510e <_reclaim_reent+0x8a>
 800511c:	4620      	mov	r0, r4
 800511e:	f000 f849 	bl	80051b4 <_free_r>
 8005122:	e7ba      	b.n	800509a <_reclaim_reent+0x16>
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f844 	bl	80051b4 <_free_r>
 800512c:	4631      	mov	r1, r6
 800512e:	e7ef      	b.n	8005110 <_reclaim_reent+0x8c>
 8005130:	2500      	movs	r5, #0
 8005132:	e7ef      	b.n	8005114 <_reclaim_reent+0x90>
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	bf00      	nop
 8005138:	20000058 	.word	0x20000058

0800513c <_sbrk_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_sbrk_r+0x1c>)
 8005140:	2300      	movs	r3, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fb feb0 	bl	8000eac <_sbrk>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_sbrk_r+0x1a>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_sbrk_r+0x1a>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20004614 	.word	0x20004614

0800515c <siprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	b500      	push	{lr}
 8005160:	b09c      	sub	sp, #112	; 0x70
 8005162:	ab1d      	add	r3, sp, #116	; 0x74
 8005164:	9002      	str	r0, [sp, #8]
 8005166:	9006      	str	r0, [sp, #24]
 8005168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800516c:	4809      	ldr	r0, [pc, #36]	; (8005194 <siprintf+0x38>)
 800516e:	9107      	str	r1, [sp, #28]
 8005170:	9104      	str	r1, [sp, #16]
 8005172:	4909      	ldr	r1, [pc, #36]	; (8005198 <siprintf+0x3c>)
 8005174:	f853 2b04 	ldr.w	r2, [r3], #4
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	a902      	add	r1, sp, #8
 8005180:	f000 f8c0 	bl	8005304 <_svfiprintf_r>
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	b01c      	add	sp, #112	; 0x70
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	20000058 	.word	0x20000058
 8005198:	ffff0208 	.word	0xffff0208

0800519c <__malloc_lock>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__malloc_lock+0x8>)
 800519e:	f7ff beb7 	b.w	8004f10 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	20004608 	.word	0x20004608

080051a8 <__malloc_unlock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_unlock+0x8>)
 80051aa:	f7ff beb2 	b.w	8004f12 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	20004608 	.word	0x20004608

080051b4 <_free_r>:
 80051b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051b6:	2900      	cmp	r1, #0
 80051b8:	d044      	beq.n	8005244 <_free_r+0x90>
 80051ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051be:	9001      	str	r0, [sp, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f1a1 0404 	sub.w	r4, r1, #4
 80051c6:	bfb8      	it	lt
 80051c8:	18e4      	addlt	r4, r4, r3
 80051ca:	f7ff ffe7 	bl	800519c <__malloc_lock>
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <_free_r+0x94>)
 80051d0:	9801      	ldr	r0, [sp, #4]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	b933      	cbnz	r3, 80051e4 <_free_r+0x30>
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	6014      	str	r4, [r2, #0]
 80051da:	b003      	add	sp, #12
 80051dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051e0:	f7ff bfe2 	b.w	80051a8 <__malloc_unlock>
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d908      	bls.n	80051fa <_free_r+0x46>
 80051e8:	6825      	ldr	r5, [r4, #0]
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	428b      	cmp	r3, r1
 80051ee:	bf01      	itttt	eq
 80051f0:	6819      	ldreq	r1, [r3, #0]
 80051f2:	685b      	ldreq	r3, [r3, #4]
 80051f4:	1949      	addeq	r1, r1, r5
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	e7ed      	b.n	80051d6 <_free_r+0x22>
 80051fa:	461a      	mov	r2, r3
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b10b      	cbz	r3, 8005204 <_free_r+0x50>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d9fa      	bls.n	80051fa <_free_r+0x46>
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	1855      	adds	r5, r2, r1
 8005208:	42a5      	cmp	r5, r4
 800520a:	d10b      	bne.n	8005224 <_free_r+0x70>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	4421      	add	r1, r4
 8005210:	1854      	adds	r4, r2, r1
 8005212:	42a3      	cmp	r3, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	d1e0      	bne.n	80051da <_free_r+0x26>
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	4421      	add	r1, r4
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	e7da      	b.n	80051da <_free_r+0x26>
 8005224:	d902      	bls.n	800522c <_free_r+0x78>
 8005226:	230c      	movs	r3, #12
 8005228:	6003      	str	r3, [r0, #0]
 800522a:	e7d6      	b.n	80051da <_free_r+0x26>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf04      	itt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	bf04      	itt	eq
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6054      	str	r4, [r2, #4]
 8005242:	e7ca      	b.n	80051da <_free_r+0x26>
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	2000460c 	.word	0x2000460c

0800524c <__ssputs_r>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	688e      	ldr	r6, [r1, #8]
 8005252:	429e      	cmp	r6, r3
 8005254:	4682      	mov	sl, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4690      	mov	r8, r2
 800525a:	461f      	mov	r7, r3
 800525c:	d838      	bhi.n	80052d0 <__ssputs_r+0x84>
 800525e:	898a      	ldrh	r2, [r1, #12]
 8005260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005264:	d032      	beq.n	80052cc <__ssputs_r+0x80>
 8005266:	6825      	ldr	r5, [r4, #0]
 8005268:	6909      	ldr	r1, [r1, #16]
 800526a:	eba5 0901 	sub.w	r9, r5, r1
 800526e:	6965      	ldr	r5, [r4, #20]
 8005270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005278:	3301      	adds	r3, #1
 800527a:	444b      	add	r3, r9
 800527c:	106d      	asrs	r5, r5, #1
 800527e:	429d      	cmp	r5, r3
 8005280:	bf38      	it	cc
 8005282:	461d      	movcc	r5, r3
 8005284:	0553      	lsls	r3, r2, #21
 8005286:	d531      	bpl.n	80052ec <__ssputs_r+0xa0>
 8005288:	4629      	mov	r1, r5
 800528a:	f7ff fe79 	bl	8004f80 <_malloc_r>
 800528e:	4606      	mov	r6, r0
 8005290:	b950      	cbnz	r0, 80052a8 <__ssputs_r+0x5c>
 8005292:	230c      	movs	r3, #12
 8005294:	f8ca 3000 	str.w	r3, [sl]
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	6921      	ldr	r1, [r4, #16]
 80052aa:	464a      	mov	r2, r9
 80052ac:	f7ff fe32 	bl	8004f14 <memcpy>
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	81a3      	strh	r3, [r4, #12]
 80052bc:	6126      	str	r6, [r4, #16]
 80052be:	6165      	str	r5, [r4, #20]
 80052c0:	444e      	add	r6, r9
 80052c2:	eba5 0509 	sub.w	r5, r5, r9
 80052c6:	6026      	str	r6, [r4, #0]
 80052c8:	60a5      	str	r5, [r4, #8]
 80052ca:	463e      	mov	r6, r7
 80052cc:	42be      	cmp	r6, r7
 80052ce:	d900      	bls.n	80052d2 <__ssputs_r+0x86>
 80052d0:	463e      	mov	r6, r7
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	4632      	mov	r2, r6
 80052d6:	4641      	mov	r1, r8
 80052d8:	f000 faa8 	bl	800582c <memmove>
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	1b9b      	subs	r3, r3, r6
 80052e0:	60a3      	str	r3, [r4, #8]
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	4433      	add	r3, r6
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	2000      	movs	r0, #0
 80052ea:	e7db      	b.n	80052a4 <__ssputs_r+0x58>
 80052ec:	462a      	mov	r2, r5
 80052ee:	f000 fab7 	bl	8005860 <_realloc_r>
 80052f2:	4606      	mov	r6, r0
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d1e1      	bne.n	80052bc <__ssputs_r+0x70>
 80052f8:	6921      	ldr	r1, [r4, #16]
 80052fa:	4650      	mov	r0, sl
 80052fc:	f7ff ff5a 	bl	80051b4 <_free_r>
 8005300:	e7c7      	b.n	8005292 <__ssputs_r+0x46>
	...

08005304 <_svfiprintf_r>:
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	4698      	mov	r8, r3
 800530a:	898b      	ldrh	r3, [r1, #12]
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	b09d      	sub	sp, #116	; 0x74
 8005310:	4607      	mov	r7, r0
 8005312:	460d      	mov	r5, r1
 8005314:	4614      	mov	r4, r2
 8005316:	d50e      	bpl.n	8005336 <_svfiprintf_r+0x32>
 8005318:	690b      	ldr	r3, [r1, #16]
 800531a:	b963      	cbnz	r3, 8005336 <_svfiprintf_r+0x32>
 800531c:	2140      	movs	r1, #64	; 0x40
 800531e:	f7ff fe2f 	bl	8004f80 <_malloc_r>
 8005322:	6028      	str	r0, [r5, #0]
 8005324:	6128      	str	r0, [r5, #16]
 8005326:	b920      	cbnz	r0, 8005332 <_svfiprintf_r+0x2e>
 8005328:	230c      	movs	r3, #12
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e0d1      	b.n	80054d6 <_svfiprintf_r+0x1d2>
 8005332:	2340      	movs	r3, #64	; 0x40
 8005334:	616b      	str	r3, [r5, #20]
 8005336:	2300      	movs	r3, #0
 8005338:	9309      	str	r3, [sp, #36]	; 0x24
 800533a:	2320      	movs	r3, #32
 800533c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005340:	f8cd 800c 	str.w	r8, [sp, #12]
 8005344:	2330      	movs	r3, #48	; 0x30
 8005346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054f0 <_svfiprintf_r+0x1ec>
 800534a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800534e:	f04f 0901 	mov.w	r9, #1
 8005352:	4623      	mov	r3, r4
 8005354:	469a      	mov	sl, r3
 8005356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800535a:	b10a      	cbz	r2, 8005360 <_svfiprintf_r+0x5c>
 800535c:	2a25      	cmp	r2, #37	; 0x25
 800535e:	d1f9      	bne.n	8005354 <_svfiprintf_r+0x50>
 8005360:	ebba 0b04 	subs.w	fp, sl, r4
 8005364:	d00b      	beq.n	800537e <_svfiprintf_r+0x7a>
 8005366:	465b      	mov	r3, fp
 8005368:	4622      	mov	r2, r4
 800536a:	4629      	mov	r1, r5
 800536c:	4638      	mov	r0, r7
 800536e:	f7ff ff6d 	bl	800524c <__ssputs_r>
 8005372:	3001      	adds	r0, #1
 8005374:	f000 80aa 	beq.w	80054cc <_svfiprintf_r+0x1c8>
 8005378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800537a:	445a      	add	r2, fp
 800537c:	9209      	str	r2, [sp, #36]	; 0x24
 800537e:	f89a 3000 	ldrb.w	r3, [sl]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80a2 	beq.w	80054cc <_svfiprintf_r+0x1c8>
 8005388:	2300      	movs	r3, #0
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005392:	f10a 0a01 	add.w	sl, sl, #1
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	9307      	str	r3, [sp, #28]
 800539a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800539e:	931a      	str	r3, [sp, #104]	; 0x68
 80053a0:	4654      	mov	r4, sl
 80053a2:	2205      	movs	r2, #5
 80053a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a8:	4851      	ldr	r0, [pc, #324]	; (80054f0 <_svfiprintf_r+0x1ec>)
 80053aa:	f7fa ff29 	bl	8000200 <memchr>
 80053ae:	9a04      	ldr	r2, [sp, #16]
 80053b0:	b9d8      	cbnz	r0, 80053ea <_svfiprintf_r+0xe6>
 80053b2:	06d0      	lsls	r0, r2, #27
 80053b4:	bf44      	itt	mi
 80053b6:	2320      	movmi	r3, #32
 80053b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053bc:	0711      	lsls	r1, r2, #28
 80053be:	bf44      	itt	mi
 80053c0:	232b      	movmi	r3, #43	; 0x2b
 80053c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ca:	2b2a      	cmp	r3, #42	; 0x2a
 80053cc:	d015      	beq.n	80053fa <_svfiprintf_r+0xf6>
 80053ce:	9a07      	ldr	r2, [sp, #28]
 80053d0:	4654      	mov	r4, sl
 80053d2:	2000      	movs	r0, #0
 80053d4:	f04f 0c0a 	mov.w	ip, #10
 80053d8:	4621      	mov	r1, r4
 80053da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053de:	3b30      	subs	r3, #48	; 0x30
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	d94e      	bls.n	8005482 <_svfiprintf_r+0x17e>
 80053e4:	b1b0      	cbz	r0, 8005414 <_svfiprintf_r+0x110>
 80053e6:	9207      	str	r2, [sp, #28]
 80053e8:	e014      	b.n	8005414 <_svfiprintf_r+0x110>
 80053ea:	eba0 0308 	sub.w	r3, r0, r8
 80053ee:	fa09 f303 	lsl.w	r3, r9, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	46a2      	mov	sl, r4
 80053f8:	e7d2      	b.n	80053a0 <_svfiprintf_r+0x9c>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	1d19      	adds	r1, r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	9103      	str	r1, [sp, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bfbb      	ittet	lt
 8005406:	425b      	neglt	r3, r3
 8005408:	f042 0202 	orrlt.w	r2, r2, #2
 800540c:	9307      	strge	r3, [sp, #28]
 800540e:	9307      	strlt	r3, [sp, #28]
 8005410:	bfb8      	it	lt
 8005412:	9204      	strlt	r2, [sp, #16]
 8005414:	7823      	ldrb	r3, [r4, #0]
 8005416:	2b2e      	cmp	r3, #46	; 0x2e
 8005418:	d10c      	bne.n	8005434 <_svfiprintf_r+0x130>
 800541a:	7863      	ldrb	r3, [r4, #1]
 800541c:	2b2a      	cmp	r3, #42	; 0x2a
 800541e:	d135      	bne.n	800548c <_svfiprintf_r+0x188>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9203      	str	r2, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfb8      	it	lt
 800542c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005430:	3402      	adds	r4, #2
 8005432:	9305      	str	r3, [sp, #20]
 8005434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005500 <_svfiprintf_r+0x1fc>
 8005438:	7821      	ldrb	r1, [r4, #0]
 800543a:	2203      	movs	r2, #3
 800543c:	4650      	mov	r0, sl
 800543e:	f7fa fedf 	bl	8000200 <memchr>
 8005442:	b140      	cbz	r0, 8005456 <_svfiprintf_r+0x152>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	eba0 000a 	sub.w	r0, r0, sl
 800544a:	fa03 f000 	lsl.w	r0, r3, r0
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	4303      	orrs	r3, r0
 8005452:	3401      	adds	r4, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545a:	4826      	ldr	r0, [pc, #152]	; (80054f4 <_svfiprintf_r+0x1f0>)
 800545c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005460:	2206      	movs	r2, #6
 8005462:	f7fa fecd 	bl	8000200 <memchr>
 8005466:	2800      	cmp	r0, #0
 8005468:	d038      	beq.n	80054dc <_svfiprintf_r+0x1d8>
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <_svfiprintf_r+0x1f4>)
 800546c:	bb1b      	cbnz	r3, 80054b6 <_svfiprintf_r+0x1b2>
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	3307      	adds	r3, #7
 8005472:	f023 0307 	bic.w	r3, r3, #7
 8005476:	3308      	adds	r3, #8
 8005478:	9303      	str	r3, [sp, #12]
 800547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547c:	4433      	add	r3, r6
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	e767      	b.n	8005352 <_svfiprintf_r+0x4e>
 8005482:	fb0c 3202 	mla	r2, ip, r2, r3
 8005486:	460c      	mov	r4, r1
 8005488:	2001      	movs	r0, #1
 800548a:	e7a5      	b.n	80053d8 <_svfiprintf_r+0xd4>
 800548c:	2300      	movs	r3, #0
 800548e:	3401      	adds	r4, #1
 8005490:	9305      	str	r3, [sp, #20]
 8005492:	4619      	mov	r1, r3
 8005494:	f04f 0c0a 	mov.w	ip, #10
 8005498:	4620      	mov	r0, r4
 800549a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800549e:	3a30      	subs	r2, #48	; 0x30
 80054a0:	2a09      	cmp	r2, #9
 80054a2:	d903      	bls.n	80054ac <_svfiprintf_r+0x1a8>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0c5      	beq.n	8005434 <_svfiprintf_r+0x130>
 80054a8:	9105      	str	r1, [sp, #20]
 80054aa:	e7c3      	b.n	8005434 <_svfiprintf_r+0x130>
 80054ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b0:	4604      	mov	r4, r0
 80054b2:	2301      	movs	r3, #1
 80054b4:	e7f0      	b.n	8005498 <_svfiprintf_r+0x194>
 80054b6:	ab03      	add	r3, sp, #12
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	462a      	mov	r2, r5
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <_svfiprintf_r+0x1f8>)
 80054be:	a904      	add	r1, sp, #16
 80054c0:	4638      	mov	r0, r7
 80054c2:	f3af 8000 	nop.w
 80054c6:	1c42      	adds	r2, r0, #1
 80054c8:	4606      	mov	r6, r0
 80054ca:	d1d6      	bne.n	800547a <_svfiprintf_r+0x176>
 80054cc:	89ab      	ldrh	r3, [r5, #12]
 80054ce:	065b      	lsls	r3, r3, #25
 80054d0:	f53f af2c 	bmi.w	800532c <_svfiprintf_r+0x28>
 80054d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054d6:	b01d      	add	sp, #116	; 0x74
 80054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054dc:	ab03      	add	r3, sp, #12
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	462a      	mov	r2, r5
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <_svfiprintf_r+0x1f8>)
 80054e4:	a904      	add	r1, sp, #16
 80054e6:	4638      	mov	r0, r7
 80054e8:	f000 f87a 	bl	80055e0 <_printf_i>
 80054ec:	e7eb      	b.n	80054c6 <_svfiprintf_r+0x1c2>
 80054ee:	bf00      	nop
 80054f0:	08005afc 	.word	0x08005afc
 80054f4:	08005b06 	.word	0x08005b06
 80054f8:	00000000 	.word	0x00000000
 80054fc:	0800524d 	.word	0x0800524d
 8005500:	08005b02 	.word	0x08005b02

08005504 <_printf_common>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	4616      	mov	r6, r2
 800550a:	4699      	mov	r9, r3
 800550c:	688a      	ldr	r2, [r1, #8]
 800550e:	690b      	ldr	r3, [r1, #16]
 8005510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005514:	4293      	cmp	r3, r2
 8005516:	bfb8      	it	lt
 8005518:	4613      	movlt	r3, r2
 800551a:	6033      	str	r3, [r6, #0]
 800551c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005520:	4607      	mov	r7, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b10a      	cbz	r2, 800552a <_printf_common+0x26>
 8005526:	3301      	adds	r3, #1
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	0699      	lsls	r1, r3, #26
 800552e:	bf42      	ittt	mi
 8005530:	6833      	ldrmi	r3, [r6, #0]
 8005532:	3302      	addmi	r3, #2
 8005534:	6033      	strmi	r3, [r6, #0]
 8005536:	6825      	ldr	r5, [r4, #0]
 8005538:	f015 0506 	ands.w	r5, r5, #6
 800553c:	d106      	bne.n	800554c <_printf_common+0x48>
 800553e:	f104 0a19 	add.w	sl, r4, #25
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	6832      	ldr	r2, [r6, #0]
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	42ab      	cmp	r3, r5
 800554a:	dc26      	bgt.n	800559a <_printf_common+0x96>
 800554c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005550:	1e13      	subs	r3, r2, #0
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	bf18      	it	ne
 8005556:	2301      	movne	r3, #1
 8005558:	0692      	lsls	r2, r2, #26
 800555a:	d42b      	bmi.n	80055b4 <_printf_common+0xb0>
 800555c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005560:	4649      	mov	r1, r9
 8005562:	4638      	mov	r0, r7
 8005564:	47c0      	blx	r8
 8005566:	3001      	adds	r0, #1
 8005568:	d01e      	beq.n	80055a8 <_printf_common+0xa4>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	68e5      	ldr	r5, [r4, #12]
 800556e:	6832      	ldr	r2, [r6, #0]
 8005570:	f003 0306 	and.w	r3, r3, #6
 8005574:	2b04      	cmp	r3, #4
 8005576:	bf08      	it	eq
 8005578:	1aad      	subeq	r5, r5, r2
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	bf0c      	ite	eq
 8005580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005584:	2500      	movne	r5, #0
 8005586:	4293      	cmp	r3, r2
 8005588:	bfc4      	itt	gt
 800558a:	1a9b      	subgt	r3, r3, r2
 800558c:	18ed      	addgt	r5, r5, r3
 800558e:	2600      	movs	r6, #0
 8005590:	341a      	adds	r4, #26
 8005592:	42b5      	cmp	r5, r6
 8005594:	d11a      	bne.n	80055cc <_printf_common+0xc8>
 8005596:	2000      	movs	r0, #0
 8005598:	e008      	b.n	80055ac <_printf_common+0xa8>
 800559a:	2301      	movs	r3, #1
 800559c:	4652      	mov	r2, sl
 800559e:	4649      	mov	r1, r9
 80055a0:	4638      	mov	r0, r7
 80055a2:	47c0      	blx	r8
 80055a4:	3001      	adds	r0, #1
 80055a6:	d103      	bne.n	80055b0 <_printf_common+0xac>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b0:	3501      	adds	r5, #1
 80055b2:	e7c6      	b.n	8005542 <_printf_common+0x3e>
 80055b4:	18e1      	adds	r1, r4, r3
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	2030      	movs	r0, #48	; 0x30
 80055ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055be:	4422      	add	r2, r4
 80055c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055c8:	3302      	adds	r3, #2
 80055ca:	e7c7      	b.n	800555c <_printf_common+0x58>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4622      	mov	r2, r4
 80055d0:	4649      	mov	r1, r9
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c0      	blx	r8
 80055d6:	3001      	adds	r0, #1
 80055d8:	d0e6      	beq.n	80055a8 <_printf_common+0xa4>
 80055da:	3601      	adds	r6, #1
 80055dc:	e7d9      	b.n	8005592 <_printf_common+0x8e>
	...

080055e0 <_printf_i>:
 80055e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	7e0f      	ldrb	r7, [r1, #24]
 80055e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055e8:	2f78      	cmp	r7, #120	; 0x78
 80055ea:	4691      	mov	r9, r2
 80055ec:	4680      	mov	r8, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	469a      	mov	sl, r3
 80055f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055f6:	d807      	bhi.n	8005608 <_printf_i+0x28>
 80055f8:	2f62      	cmp	r7, #98	; 0x62
 80055fa:	d80a      	bhi.n	8005612 <_printf_i+0x32>
 80055fc:	2f00      	cmp	r7, #0
 80055fe:	f000 80d8 	beq.w	80057b2 <_printf_i+0x1d2>
 8005602:	2f58      	cmp	r7, #88	; 0x58
 8005604:	f000 80a3 	beq.w	800574e <_printf_i+0x16e>
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005610:	e03a      	b.n	8005688 <_printf_i+0xa8>
 8005612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005616:	2b15      	cmp	r3, #21
 8005618:	d8f6      	bhi.n	8005608 <_printf_i+0x28>
 800561a:	a101      	add	r1, pc, #4	; (adr r1, 8005620 <_printf_i+0x40>)
 800561c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005620:	08005679 	.word	0x08005679
 8005624:	0800568d 	.word	0x0800568d
 8005628:	08005609 	.word	0x08005609
 800562c:	08005609 	.word	0x08005609
 8005630:	08005609 	.word	0x08005609
 8005634:	08005609 	.word	0x08005609
 8005638:	0800568d 	.word	0x0800568d
 800563c:	08005609 	.word	0x08005609
 8005640:	08005609 	.word	0x08005609
 8005644:	08005609 	.word	0x08005609
 8005648:	08005609 	.word	0x08005609
 800564c:	08005799 	.word	0x08005799
 8005650:	080056bd 	.word	0x080056bd
 8005654:	0800577b 	.word	0x0800577b
 8005658:	08005609 	.word	0x08005609
 800565c:	08005609 	.word	0x08005609
 8005660:	080057bb 	.word	0x080057bb
 8005664:	08005609 	.word	0x08005609
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005609 	.word	0x08005609
 8005670:	08005609 	.word	0x08005609
 8005674:	08005783 	.word	0x08005783
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	602a      	str	r2, [r5, #0]
 8005680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005688:	2301      	movs	r3, #1
 800568a:	e0a3      	b.n	80057d4 <_printf_i+0x1f4>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	6829      	ldr	r1, [r5, #0]
 8005690:	0606      	lsls	r6, r0, #24
 8005692:	f101 0304 	add.w	r3, r1, #4
 8005696:	d50a      	bpl.n	80056ae <_printf_i+0xce>
 8005698:	680e      	ldr	r6, [r1, #0]
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	2e00      	cmp	r6, #0
 800569e:	da03      	bge.n	80056a8 <_printf_i+0xc8>
 80056a0:	232d      	movs	r3, #45	; 0x2d
 80056a2:	4276      	negs	r6, r6
 80056a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a8:	485e      	ldr	r0, [pc, #376]	; (8005824 <_printf_i+0x244>)
 80056aa:	230a      	movs	r3, #10
 80056ac:	e019      	b.n	80056e2 <_printf_i+0x102>
 80056ae:	680e      	ldr	r6, [r1, #0]
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056b6:	bf18      	it	ne
 80056b8:	b236      	sxthne	r6, r6
 80056ba:	e7ef      	b.n	800569c <_printf_i+0xbc>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1d19      	adds	r1, r3, #4
 80056c2:	6029      	str	r1, [r5, #0]
 80056c4:	0601      	lsls	r1, r0, #24
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0xec>
 80056c8:	681e      	ldr	r6, [r3, #0]
 80056ca:	e002      	b.n	80056d2 <_printf_i+0xf2>
 80056cc:	0646      	lsls	r6, r0, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0xe8>
 80056d0:	881e      	ldrh	r6, [r3, #0]
 80056d2:	4854      	ldr	r0, [pc, #336]	; (8005824 <_printf_i+0x244>)
 80056d4:	2f6f      	cmp	r7, #111	; 0x6f
 80056d6:	bf0c      	ite	eq
 80056d8:	2308      	moveq	r3, #8
 80056da:	230a      	movne	r3, #10
 80056dc:	2100      	movs	r1, #0
 80056de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056e2:	6865      	ldr	r5, [r4, #4]
 80056e4:	60a5      	str	r5, [r4, #8]
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	bfa2      	ittt	ge
 80056ea:	6821      	ldrge	r1, [r4, #0]
 80056ec:	f021 0104 	bicge.w	r1, r1, #4
 80056f0:	6021      	strge	r1, [r4, #0]
 80056f2:	b90e      	cbnz	r6, 80056f8 <_printf_i+0x118>
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	d04d      	beq.n	8005794 <_printf_i+0x1b4>
 80056f8:	4615      	mov	r5, r2
 80056fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80056fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005702:	5dc7      	ldrb	r7, [r0, r7]
 8005704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005708:	4637      	mov	r7, r6
 800570a:	42bb      	cmp	r3, r7
 800570c:	460e      	mov	r6, r1
 800570e:	d9f4      	bls.n	80056fa <_printf_i+0x11a>
 8005710:	2b08      	cmp	r3, #8
 8005712:	d10b      	bne.n	800572c <_printf_i+0x14c>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07de      	lsls	r6, r3, #31
 8005718:	d508      	bpl.n	800572c <_printf_i+0x14c>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	4299      	cmp	r1, r3
 8005720:	bfde      	ittt	le
 8005722:	2330      	movle	r3, #48	; 0x30
 8005724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800572c:	1b52      	subs	r2, r2, r5
 800572e:	6122      	str	r2, [r4, #16]
 8005730:	f8cd a000 	str.w	sl, [sp]
 8005734:	464b      	mov	r3, r9
 8005736:	aa03      	add	r2, sp, #12
 8005738:	4621      	mov	r1, r4
 800573a:	4640      	mov	r0, r8
 800573c:	f7ff fee2 	bl	8005504 <_printf_common>
 8005740:	3001      	adds	r0, #1
 8005742:	d14c      	bne.n	80057de <_printf_i+0x1fe>
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	b004      	add	sp, #16
 800574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574e:	4835      	ldr	r0, [pc, #212]	; (8005824 <_printf_i+0x244>)
 8005750:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005754:	6829      	ldr	r1, [r5, #0]
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	f851 6b04 	ldr.w	r6, [r1], #4
 800575c:	6029      	str	r1, [r5, #0]
 800575e:	061d      	lsls	r5, r3, #24
 8005760:	d514      	bpl.n	800578c <_printf_i+0x1ac>
 8005762:	07df      	lsls	r7, r3, #31
 8005764:	bf44      	itt	mi
 8005766:	f043 0320 	orrmi.w	r3, r3, #32
 800576a:	6023      	strmi	r3, [r4, #0]
 800576c:	b91e      	cbnz	r6, 8005776 <_printf_i+0x196>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	f023 0320 	bic.w	r3, r3, #32
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	2310      	movs	r3, #16
 8005778:	e7b0      	b.n	80056dc <_printf_i+0xfc>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	2378      	movs	r3, #120	; 0x78
 8005784:	4828      	ldr	r0, [pc, #160]	; (8005828 <_printf_i+0x248>)
 8005786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800578a:	e7e3      	b.n	8005754 <_printf_i+0x174>
 800578c:	0659      	lsls	r1, r3, #25
 800578e:	bf48      	it	mi
 8005790:	b2b6      	uxthmi	r6, r6
 8005792:	e7e6      	b.n	8005762 <_printf_i+0x182>
 8005794:	4615      	mov	r5, r2
 8005796:	e7bb      	b.n	8005710 <_printf_i+0x130>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	6826      	ldr	r6, [r4, #0]
 800579c:	6961      	ldr	r1, [r4, #20]
 800579e:	1d18      	adds	r0, r3, #4
 80057a0:	6028      	str	r0, [r5, #0]
 80057a2:	0635      	lsls	r5, r6, #24
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0x1cc>
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0x1d2>
 80057ac:	0670      	lsls	r0, r6, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0x1c8>
 80057b0:	8019      	strh	r1, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	4615      	mov	r5, r2
 80057b8:	e7ba      	b.n	8005730 <_printf_i+0x150>
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	1d1a      	adds	r2, r3, #4
 80057be:	602a      	str	r2, [r5, #0]
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	2100      	movs	r1, #0
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7fa fd1a 	bl	8000200 <memchr>
 80057cc:	b108      	cbz	r0, 80057d2 <_printf_i+0x1f2>
 80057ce:	1b40      	subs	r0, r0, r5
 80057d0:	6060      	str	r0, [r4, #4]
 80057d2:	6863      	ldr	r3, [r4, #4]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057dc:	e7a8      	b.n	8005730 <_printf_i+0x150>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	462a      	mov	r2, r5
 80057e2:	4649      	mov	r1, r9
 80057e4:	4640      	mov	r0, r8
 80057e6:	47d0      	blx	sl
 80057e8:	3001      	adds	r0, #1
 80057ea:	d0ab      	beq.n	8005744 <_printf_i+0x164>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	d413      	bmi.n	800581a <_printf_i+0x23a>
 80057f2:	68e0      	ldr	r0, [r4, #12]
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	4298      	cmp	r0, r3
 80057f8:	bfb8      	it	lt
 80057fa:	4618      	movlt	r0, r3
 80057fc:	e7a4      	b.n	8005748 <_printf_i+0x168>
 80057fe:	2301      	movs	r3, #1
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d09b      	beq.n	8005744 <_printf_i+0x164>
 800580c:	3501      	adds	r5, #1
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	9903      	ldr	r1, [sp, #12]
 8005812:	1a5b      	subs	r3, r3, r1
 8005814:	42ab      	cmp	r3, r5
 8005816:	dcf2      	bgt.n	80057fe <_printf_i+0x21e>
 8005818:	e7eb      	b.n	80057f2 <_printf_i+0x212>
 800581a:	2500      	movs	r5, #0
 800581c:	f104 0619 	add.w	r6, r4, #25
 8005820:	e7f5      	b.n	800580e <_printf_i+0x22e>
 8005822:	bf00      	nop
 8005824:	08005b0d 	.word	0x08005b0d
 8005828:	08005b1e 	.word	0x08005b1e

0800582c <memmove>:
 800582c:	4288      	cmp	r0, r1
 800582e:	b510      	push	{r4, lr}
 8005830:	eb01 0402 	add.w	r4, r1, r2
 8005834:	d902      	bls.n	800583c <memmove+0x10>
 8005836:	4284      	cmp	r4, r0
 8005838:	4623      	mov	r3, r4
 800583a:	d807      	bhi.n	800584c <memmove+0x20>
 800583c:	1e43      	subs	r3, r0, #1
 800583e:	42a1      	cmp	r1, r4
 8005840:	d008      	beq.n	8005854 <memmove+0x28>
 8005842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800584a:	e7f8      	b.n	800583e <memmove+0x12>
 800584c:	4402      	add	r2, r0
 800584e:	4601      	mov	r1, r0
 8005850:	428a      	cmp	r2, r1
 8005852:	d100      	bne.n	8005856 <memmove+0x2a>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800585a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800585e:	e7f7      	b.n	8005850 <memmove+0x24>

08005860 <_realloc_r>:
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005864:	4680      	mov	r8, r0
 8005866:	4614      	mov	r4, r2
 8005868:	460e      	mov	r6, r1
 800586a:	b921      	cbnz	r1, 8005876 <_realloc_r+0x16>
 800586c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	4611      	mov	r1, r2
 8005872:	f7ff bb85 	b.w	8004f80 <_malloc_r>
 8005876:	b92a      	cbnz	r2, 8005884 <_realloc_r+0x24>
 8005878:	f7ff fc9c 	bl	80051b4 <_free_r>
 800587c:	4625      	mov	r5, r4
 800587e:	4628      	mov	r0, r5
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	f000 f81b 	bl	80058be <_malloc_usable_size_r>
 8005888:	4284      	cmp	r4, r0
 800588a:	4607      	mov	r7, r0
 800588c:	d802      	bhi.n	8005894 <_realloc_r+0x34>
 800588e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005892:	d812      	bhi.n	80058ba <_realloc_r+0x5a>
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff fb72 	bl	8004f80 <_malloc_r>
 800589c:	4605      	mov	r5, r0
 800589e:	2800      	cmp	r0, #0
 80058a0:	d0ed      	beq.n	800587e <_realloc_r+0x1e>
 80058a2:	42bc      	cmp	r4, r7
 80058a4:	4622      	mov	r2, r4
 80058a6:	4631      	mov	r1, r6
 80058a8:	bf28      	it	cs
 80058aa:	463a      	movcs	r2, r7
 80058ac:	f7ff fb32 	bl	8004f14 <memcpy>
 80058b0:	4631      	mov	r1, r6
 80058b2:	4640      	mov	r0, r8
 80058b4:	f7ff fc7e 	bl	80051b4 <_free_r>
 80058b8:	e7e1      	b.n	800587e <_realloc_r+0x1e>
 80058ba:	4635      	mov	r5, r6
 80058bc:	e7df      	b.n	800587e <_realloc_r+0x1e>

080058be <_malloc_usable_size_r>:
 80058be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c2:	1f18      	subs	r0, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbc      	itt	lt
 80058c8:	580b      	ldrlt	r3, [r1, r0]
 80058ca:	18c0      	addlt	r0, r0, r3
 80058cc:	4770      	bx	lr
	...

080058d0 <_init>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr

080058dc <_fini>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr
